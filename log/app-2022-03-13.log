date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"developer"
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 16:36:30	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 16:36:30	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 16:36:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:36:31	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Failed to create/setup connection: FATAL: database "oauth2" does not exist
date:2022-03-13 16:36:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:31	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 16:36:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:32	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 16:36:32	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:32	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 16:36:33	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:34	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:39	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:36:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:37:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=1)
date:2022-03-13 16:37:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Timeout failure stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:37:09	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:37:19	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:37:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:37:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:37:39	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:37:49	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:37:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:38:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:38:09	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:38:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:38:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:38:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:38:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:38:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:39:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:39:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:39:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:39:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:39:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:39:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:39:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:39:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:40:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:40:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:40:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:40:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:40:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:40:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:40:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:40:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:41:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:41:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:41:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:41:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:41:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:41:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:41:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:41:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Cannot acquire connection from data source
org.postgresql.util.PSQLException: FATAL: database "oauth2" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2786)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:172)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:271)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:225)
	at org.postgresql.Driver.makeConnection(Driver.java:466)
	at org.postgresql.Driver.connect(Driver.java:265)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:706)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:692)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1d4c2f6d
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7fe13228
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@784e1d4a
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1a6351af
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@66a832c9
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@102e3c46
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1802c744
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@186c03c2
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3f75547c
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5e5883d8
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@506e57b0
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@28e43c6c
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3d274bb8
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@27fb5987
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@50a591f
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c84028e
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@b79e22d
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@76b3b5a4
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2126c8cc
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@d1a3e14
date:2022-03-13 16:42:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:42:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:42:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:43:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:43:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:44:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:44:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:45:01	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:45:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 16:45:49	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 16:45:49	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 16:46:04	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 16:46:04	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 16:46:04	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6b12f5df
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@78922bba
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6277e4fe
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5e1c4c4
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@79a165aa
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@10875edf
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4d8a0825
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@46c632b4
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@343883f3
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1ee3520d
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3b5aad4
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@74916b84
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@44659fe
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@b10041
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2efce989
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@51ce7a99
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@67f150f7
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6fcaf740
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2091843579 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2091843579 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2633eb91
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@40b477c
date:2022-03-13 16:46:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=1, idle=19, waiting=0)
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 87ms
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('admin','atoken_admin','rtoken_admin');
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1706012601 wrapping INSERT INTO bearer_token VALUES ('admin','atoken_admin','rtoken_admin')
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1706012601 wrapping INSERT INTO bearer_token VALUES ('admin','atoken_admin','rtoken_admin')
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('user','atoken_user','rtoken_user');
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@503611572 wrapping INSERT INTO bearer_token VALUES ('user','atoken_user','rtoken_user')
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@503611572 wrapping INSERT INTO bearer_token VALUES ('user','atoken_user','rtoken_user')
date:2022-03-13 16:46:05	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 867µs
date:2022-03-13 16:46:05	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 16:46:06	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 16:46:34	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:47:04	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:47:34	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:48:04	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 16:48:34	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:04:26	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:04:26	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@12da2e0
date:2022-03-13 17:04:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6003fd35
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1ccfb8ca
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3096f6c2
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5c407892
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2355cc7a
date:2022-03-13 17:04:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@42bd3932
date:2022-03-13 17:04:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@459af741
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1a419388
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@177abaa6
date:2022-03-13 17:04:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:04:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1492917289 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:04:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1492917289 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3ca565d2
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2e17adf8
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@38dca661
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ab18456
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6dade527
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7e46fd07
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2374a300
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5591000c
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57175344
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1e703264
date:2022-03-13 17:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:04:27	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:04:28	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:04:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:05:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:05:58	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:05:58	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2340176f
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1d7a4c90
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fc0e86
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@38f4d708
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1b2c4416
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@547d952f
date:2022-03-13 17:05:58	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@31102918
date:2022-03-13 17:05:58	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2fc2e4a5
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@56b719bf
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6edb2aab
date:2022-03-13 17:05:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:05:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1499494825 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:05:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1499494825 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5eb38681
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@666cb63e
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@8f831ad
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3f41cc6b
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d84c28c
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7eda5644
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3766656b
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@675d578
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5dbee798
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@71faf21d
date:2022-03-13 17:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:05:59	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:05:59	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:06:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:06:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:07:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:07:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:08:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:08:54	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:08:54	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:08:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@22941cd3
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1443ebdd
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5576614e
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@660accc2
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@64fa3654
date:2022-03-13 17:08:55	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6f6c3415
date:2022-03-13 17:08:55	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@9f654a7
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@39aaf587
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@cd73c70
date:2022-03-13 17:08:55	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2157d63
date:2022-03-13 17:08:55	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@58134982 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:08:55	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@58134982 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@397d52ea
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57958e8f
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@62940cb1
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4b439be5
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@18fa7a65
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@63e06e03
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@21d3074a
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@76182c26
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3dfa59d2
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5d8aa818
date:2022-03-13 17:08:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:08:55	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:08:56	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:09:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:09:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:10:27	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:10:27	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@574ee07f
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@cc60590
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1b78de56
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5612751a
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@767f2abf
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4a294b65
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@17feb618
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5281bb58
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5d244965
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5dd643c7
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "accounts" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@512365426 wrapping create table "accounts" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1581331313 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1581331313 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@512365426 wrapping create table "accounts" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3ffa7013
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 13ms
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO accounts(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@199520252 wrapping INSERT INTO accounts(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:10:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@199520252 wrapping INSERT INTO accounts(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@60fe57cf
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1f6e55d4
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7049f585
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1cdf6977
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@e0d150c
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@632021ec
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5cfa05d0
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3b095be9
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5dca9cf1
date:2022-03-13 17:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:10:28	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:10:28	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:10:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:11:08	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:11:08	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@320f5cfc
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@68d9d9ce
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@223266c0
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5440d349
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1ce08d81
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a51307a
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@be44596
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@596c0538
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@41f80711
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@72193db4
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1597745202 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@346923768 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1597745202 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@346923768 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 10ms
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5bf80e94
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1669853974 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:11:08	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1669853974 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@62848516
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@63c5c6d8
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@588ab389
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@439d9aa2
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5771bf2
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4849fe82
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@45521af9
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6a35d07b
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57a0fe44
date:2022-03-13 17:11:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:11:09	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:11:09	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:11:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:12:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:12:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:13:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:13:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:14:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:14:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:15:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:15:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:16:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:16:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:17:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:17:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:18:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:18:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:19:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:19:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:20:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:20:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:21:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:21:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:22:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:22:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:23:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:23:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:24:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:24:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:25:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:25:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:26:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:26:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:27:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:27:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:28:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,id), (@t9,access_token), (@t9,refresh_token)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   16.488417 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    4.607916 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   13.379042 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   21.161125 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    7.789208 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    5.136083 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.337000 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    6.806459 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   31.729791 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    6.862500 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    2.615375 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.081875 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.303750 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.445875 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.730750 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    6.311667 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   21.438250 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.256209 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   29.056500 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.301666 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.297667 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   22.016167 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   42.585083 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  247.738375 ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin']
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1609001903 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1609001903 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 3ms
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /----+--------------+---------------\
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1  | 2            | 3             |
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id | access_token | refresh_token |
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |----+--------------+---------------|
date:2022-03-13 17:28:29	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \----+--------------+---------------/
date:2022-03-13 17:28:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,access_token), (@t9,id), (@t9,refresh_token)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    3.474167 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.080875 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.144917 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    6.344333 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    8.069125 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    2.664416 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.044083 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.430667 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   15.790458 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    8.554458 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.129417 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.087792 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.024333 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.065500 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    0.229375 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    2.771166 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    3.879875 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.110083 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   15.325917 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.458958 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.169792 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    4.415167 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    4.564458 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   78.829332 ms
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin']
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@885382712 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@885382712 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 847µs
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /----+--------------+---------------\
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1  | 2            | 3             |
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id | access_token | refresh_token |
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |----+--------------+---------------|
date:2022-03-13 17:28:47	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \----+--------------+---------------/
date:2022-03-13 17:29:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:29:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:30:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:30:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:31:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:31:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:32:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:32:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:33:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:33:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:34:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:34:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:35:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:35:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:36:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:36:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:36:38	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:36:38	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@8c49384
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@244fc9da
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a28afd
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3efa03eb
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@128eef03
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4855f591
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5e367b04
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@303dce72
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@55aed981
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@323047d8
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1727211696 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@657431130 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@657431130 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:36:38	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1727211696 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5f33e4c1
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@123ff0b
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@22e24c7f
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@12dcd17c
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@52093a0a
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4ccc4ce7
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7cfd70b5
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@8de0967
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@131cab1c
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3d9966ec
date:2022-03-13 17:36:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:36:38	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:36:39	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,id), (@t9,refresh_token), (@t9,access_token)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_admin (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode atoken_admin (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode atoken_admin (volatileHint=false) : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   13.165125 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    3.283042 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    7.170375 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   22.793834 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    8.854667 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    8.394375 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.595292 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    9.814167 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   33.729125 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    9.778833 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.489375 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.802417 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.903000 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.634416 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.630916 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    7.680625 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   37.544292 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.222125 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   58.720958 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    3.365708 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    1.283959 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   19.528750 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   35.396167 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  293.781543 ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin']
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1641156537 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1641156537 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'atoken_admin'
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /----+--------------+---------------\
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1  | 2            | 3             |
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id | access_token | refresh_token |
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |----+--------------+---------------|
date:2022-03-13 17:36:43	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \----+--------------+---------------/
date:2022-03-13 17:37:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:37:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:38:10	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:38:10	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@350bcc96
date:2022-03-13 17:38:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6e8412e0
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@ad53172
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@72154cf2
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1911515a
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57cc538a
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7431b6a0
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2c9b1608
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3f931940
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@a764d3b
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@730b6e63
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1924384023 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@440006215 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1924384023 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:38:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@440006215 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7541d5c
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@20aa5def
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@188dc354
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@30ddde50
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@17c48bea
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6573e9d8
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@13120141
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4d63722d
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ecb3bb0
date:2022-03-13 17:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:38:11	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:38:12	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,id), (@t9,refresh_token), (@t9,access_token)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   15.710084 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.704500 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    9.855958 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   18.151292 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    5.944958 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    7.101125 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.572708 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    7.935791 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   28.194875 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    5.510417 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.828834 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.864708 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    1.017708 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.454208 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.263250 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    6.900875 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   37.000375 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    1.678500 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   30.706458 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.301417 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.211125 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   27.953458 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   52.570542 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  268.433166 ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1']
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1970776785 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1970776785 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /----+--------------+---------------\
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1  | 2            | 3             |
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id | access_token | refresh_token |
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |----+--------------+---------------|
date:2022-03-13 17:38:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \----+--------------+---------------/
date:2022-03-13 17:38:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:39:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:39:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:39:53	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:39:53	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2cab4d5
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a06b3a3
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4dfc9692
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4878e3df
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1fc38a19
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@10d7b9e9
date:2022-03-13 17:39:53	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3936e567
date:2022-03-13 17:39:53	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@365f9f85
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@35cf4815
date:2022-03-13 17:39:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@18faa7b4
date:2022-03-13 17:39:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:39:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@16696411
date:2022-03-13 17:39:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@113914971 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:39:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@577694069 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:39:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@113914971 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:39:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@577694069 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5c0062ee
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@13c0069b
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ecac450
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@35e7a74
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5c167fe3
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4ff15e24
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4791fbce
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@37ecb492
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@58ea3ceb
date:2022-03-13 17:39:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:39:54	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:39:54	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,id), (@t9,access_token), (@t9,refresh_token)
date:2022-03-13 17:40:06	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   10.995875 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.692709 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    6.999500 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   21.233000 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    6.442875 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    6.533959 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.598334 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    4.536958 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   44.057375 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   11.647334 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.625500 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    3.060334 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    1.453583 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.659167 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.944959 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    5.747500 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   28.342500 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.452750 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   27.376500 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.494167 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.220542 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   12.294500 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   44.473875 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  247.883796 ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1']
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@564838535 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@564838535 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /----+--------------+---------------\
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1  | 2            | 3             |
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id | access_token | refresh_token |
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |----+--------------+---------------|
date:2022-03-13 17:40:07	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \----+--------------+---------------/
date:2022-03-13 17:40:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:40:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:41:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:41:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:42:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:42:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:43:16	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:43:16	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:43:16	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c9bb803
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@43ada56d
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a63cc92
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@30e57b22
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@71ff869d
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fd7c302
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6be48336
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@70c3c903
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d8572e8
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c2b6189
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1662194218 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@623967306 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@623967306 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:43:17	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1662194218 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5319ac09
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3d7cecb8
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6b38cbcd
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2c58c80a
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@323f506c
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@68fc63bf
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4537bbce
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2fc533fa
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@67b1aa5e
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6c5bdc8c
date:2022-03-13 17:43:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:43:17	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:43:18	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:43:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:44:13	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:44:13	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c7229e7
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@b8ffc8a
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@28f89c5b
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4aaa29b5
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@570a1c16
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2395d1d1
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4fe39bbc
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@549fe474
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5372a85d
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5e64e0bb
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@992757880 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1705853288 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@992757880 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1705853288 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@d89aeb0
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 11ms
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 11ms
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@335833296 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2132646333 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@335833296 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2132646333 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@573561624 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@573561624 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 17:44:13	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 693µs
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@269e4731
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@606833ff
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@19707671
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@594cb7c1
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@d3fd416
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2c69f985
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@36b0c187
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@a7e8a2f
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@79927012
date:2022-03-13 17:44:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:44:13	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:44:14	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,access_token), (@t9,id), (@t9,refresh_token)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:44:29	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:44:30	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   15.162917 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.675541 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    7.641042 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   20.408958 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    8.679166 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    9.704875 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.641166 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    7.082291 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   51.270625 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   14.119458 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.937583 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    1.175250 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.343625 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.129375 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.312000 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    6.458375 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   29.346334 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    1.743250 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   32.568625 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.941667 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.304958 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   27.721625 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   39.558750 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  283.927456 ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1']
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@509788940 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@509788940 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------+--------------+---------------\
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1         | 2            | 3             |
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id        | access_token | refresh_token |
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------+--------------+---------------|
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | account_1 | atoken_1     | rtoken_1      |
date:2022-03-13 17:44:30	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------+--------------+---------------/
date:2022-03-13 17:44:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:45:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:45:36	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:45:36	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3502e0ba
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3157b30b
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4d35f3f4
date:2022-03-13 17:45:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@737ca6a
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2512ed06
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@29d1dd44
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4b9931d9
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@72c4c65a
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@408c6fd9
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6790a171
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1284196537 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1246613482 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1246613482 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:45:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1284196537 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@650543a3
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@31a7bf4f
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1276fc05
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@700f5c13
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3fd811ea
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@33099c99
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@16bad829
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c5ff129
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6377e409
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1ce551aa
date:2022-03-13 17:45:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:45:37	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:45:38	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,access_token), (@t9,id), (@t9,refresh_token)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   17.267333 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.741750 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    7.673500 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   21.043875 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    6.344125 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    7.739500 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.593000 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    6.246500 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   34.245167 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:   19.304292 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.452791 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    3.674917 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.672000 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.238041 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    3.849458 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    6.808833 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   28.286375 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.202542 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   27.359084 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.320625 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.249500 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   42.601416 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   39.209500 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  280.124124 ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1']
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1589169792 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1589169792 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------+--------------+---------------\
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1         | 2            | 3             |
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id        | access_token | refresh_token |
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------+--------------+---------------|
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | account_1 | atoken_1     | rtoken_1      |
date:2022-03-13 17:45:41	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------+--------------+---------------/
date:2022-03-13 17:46:06	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,id), (@t9,refresh_token), (@t9,access_token)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    6.647750 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.075625 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.025958 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    6.731291 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    5.018958 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:   12.322375 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.043459 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.382875 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   14.476334 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    9.058083 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.075584 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.057417 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.045417 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.083666 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    0.303792 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    1.186792 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    6.939708 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.399250 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   12.449917 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.151500 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.022166 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    2.580667 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    6.663167 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   87.741751 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1']
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1618230688 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1618230688 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 737µs
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------+--------------+---------------\
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1         | 2            | 3             |
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id        | access_token | refresh_token |
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------+--------------+---------------|
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | account_1 | atoken_1     | rtoken_1      |
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------+--------------+---------------/
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table account
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.name : String'
|           3: Path s4.password : String'
|           4: Path s4.email : String'
|           5: Path s4.created : java.sql.Date'
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode atoken_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table account
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.name : String'
|           3: Path s8.password : String'
|           4: Path s8.email : String'
|           5: Path s8.created : java.sql.Date'
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode atoken_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.account)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|   from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|   from s11: Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|     value: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|       0: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s11.id : String'
|         2: Path s11.name : String'
|         3: Path s11.password : String'
|         4: Path s11.email : String'
|         5: Path s11.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|   from s11: Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|     value: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|       0: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s11.id : String'
|         2: Path s11.name : String'
|         3: Path s11.password : String'
|         4: Path s11.email : String'
|         5: Path s11.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', String', String', java.sql.Date')>]
|   from s11: Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<(String', String', String', String', java.sql.Date')>]
|     value: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s11.id : String'
|       2: Path s11.name : String'
|       3: Path s11.password : String'
|       4: Path s11.email : String'
|       5: Path s11.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', String', String', java.sql.Date')>]
|   from s11: Bind : Vector[t10<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       value: StructNode : {created: java.sql.Date', id: String', name: String', password: String', email: String'}
|         created: Path s6.created : java.sql.Date'
|         id: Path s6.id : String'
|         name: Path s6.name : String'
|         password: Path s6.password : String'
|         email: Path s6.email : String'
|   select: Pure t12 : Vector[t12<(String', String', String', String', java.sql.Date')>]
|     value: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s11.id : String'
|       2: Path s11.name : String'
|       3: Path s11.password : String'
|       4: Path s11.email : String'
|       5: Path s11.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.created with symbols 
| Path s6.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.created to:
| Path s6.created

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.name with symbols 
| Path s6.name : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.name to:
| Path s6.name

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.password with symbols 
| Path s6.password : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.password to:
| Path s6.password

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.email with symbols 
| Path s6.email : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.email to:
| Path s6.email

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   created: Path s6.created
|   id: Path s6.id
|   name: Path s6.name
|   password: Path s6.password
|   email: Path s6.email

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path created
| Path s6.created

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.created
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.id
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path name
| Path s6.name

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.name
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s6.password

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s6.password
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email
| Path s6.email

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s6.email
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13), UnassignedType)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.created
|     s14: Path s6.id
|     s15: Path s6.name
|     s16: Path s6.password
|     s17: Path s6.email

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s14

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.name with symbols t10
| Path s11.name : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.name with local part Path name over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.name to:
| Path s11.s15

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.password with symbols t10
| Path s11.password : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.password with local part Path password over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.password to:
| Path s11.s16

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.email with symbols t10
| Path s11.email : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.email with local part Path email over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.email to:
| Path s11.s17

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.created with symbols t10
| Path s11.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.created with local part Path created over t10
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.created to:
| Path s11.s13

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s14
|   2: Path s11.s15
|   3: Path s11.s16
|   4: Path s11.s17
|   5: Path s11.s13

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s14

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s14
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s15

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s11.s15
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s16

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s11.s16
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s11.s17

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Path s11.s17
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s11.s13

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s22 -> Path s11.s13
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (HashMap(List(_5) -> s22, List(_2) -> s19, List(_4) -> s21, List(_1) -> s18, List(_3) -> s20), UnassignedType)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s18: Path s11.s14
|     s19: Path s11.s15
|     s20: Path s11.s16
|     s21: Path s11.s17
|     s22: Path s11.s13

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|   from s11: Bind : Vector[t10<{s13: java.sql.Date', s14: String', s15: String', s16: String', s17: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: java.sql.Date', s14: String', s15: String', s16: String', s17: String'}>]
|       value: StructNode : {s13: java.sql.Date', s14: String', s15: String', s16: String', s17: String'}
|         s13: Path s6.created : java.sql.Date'
|         s14: Path s6.id : String'
|         s15: Path s6.name : String'
|         s16: Path s6.password : String'
|         s17: Path s6.email : String'
|   select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|     value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}
|       s18: Path s11.s14 : String'
|       s19: Path s11.s15 : String'
|       s20: Path s11.s16 : String'
|       s21: Path s11.s17 : String'
|       s22: Path s11.s13 : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|   from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode atoken_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|     value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}
|       s18: Path s6.id : String'
|       s19: Path s6.name : String'
|       s20: Path s6.password : String'
|       s21: Path s6.email : String'
|       s22: Path s6.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,created), (@t9,email), (@t9,password), (@t9,name), (@t9,id)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', String', String', java.sql.Date')]>
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', java.sql.Date')
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Date'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|       value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}
|         s18: Path s6.id : String'
|         s19: Path s6.name : String'
|         s20: Path s6.password : String'
|         s21: Path s6.email : String'
|         s22: Path s6.created : java.sql.Date'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s18 : String'
|       2: Path s23.s19 : String'
|       3: Path s23.s20 : String'
|       4: Path s23.s21 : String'
|       5: Path s23.s22 : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s6.id,s24), 1 -> (Path s6.name,s25), 2 -> (Path s6.password,s26), 3 -> (Path s6.email,s27), 4 -> (Path s6.created,s28))
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Bind : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|     from s6: ...
|     select: Pure t29 : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|       value: StructNode : {s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}
|         s27: Path s6.email : String'
|         s24: Path s6.id : String'
|         s26: Path s6.password : String'
|         s25: Path s6.name : String'
|         s28: Path s6.created : java.sql.Date'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Bind : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode atoken_1 (volatileHint=false) : String'
|     select: Pure t29 : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|       value: StructNode : {s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}
|         s27: Path s6.email : String'
|         s24: Path s6.id : String'
|         s26: Path s6.password : String'
|         s25: Path s6.name : String'
|         s28: Path s6.created : java.sql.Date'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,email),List(email)), ((@t9,password),List(password)), ((@t9,name),List(name)), ((@t9,created),List(created)))
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s30, None, None, ConstArray(), None, None, None, None, false : Vector[t31<{s32: String', s33: String', s34: String', s35: String', s36: java.sql.Date'}>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t31 : Vector[t31<{s32: String', s33: String', s34: String', s35: String', s36: java.sql.Date'}>]
|     value: StructNode : {s32: String', s33: String', s34: String', s35: String', s36: java.sql.Date'}
|       s32: Path s30.id : String'
|       s33: Path s30.email : String'
|       s34: Path s30.password : String'
|       s35: Path s30.name : String'
|       s36: Path s30.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t9,created) -> s36, (@t9,email) -> s33, (@t9,password) -> s34, (@t9,name) -> s35, (@t9,id) -> s32)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode atoken_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<{s32: String', s33: String', s34: String', s35: String', s36: java.sql.Date'}>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t31 : Vector[t31<{s32: String', s33: String', s34: String', s35: String', s36: java.sql.Date'}>]
|     value: StructNode : {s32: String', s33: String', s34: String', s35: String', s36: java.sql.Date'}
|       s32: Path s30.id : String'
|       s33: Path s30.email : String'
|       s34: Path s30.password : String'
|       s35: Path s30.name : String'
|       s36: Path s30.created : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode atoken_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|   from s6: ...
|   select: Pure t29 : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|     value: StructNode : {s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}
|       s27: Path s6.email : String'
|       s24: Path s6.id : String'
|       s26: Path s6.password : String'
|       s25: Path s6.name : String'
|       s28: Path s6.created : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t29 : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|     value: StructNode : {s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}
|       s27: Path s30.email : String'
|       s24: Path s30.id : String'
|       s26: Path s30.password : String'
|       s25: Path s30.name : String'
|       s28: Path s30.created : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode atoken_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t29,s28) -> s28, (t29,s25) -> s25, (t29,s27) -> s27, (t29,s26) -> s26, (t29,s24) -> s24)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t29,s28),List(s28)), ((t29,s25),List(s25)), ((t29,s27),List(s27)), ((t29,s26),List(s26)), ((t29,s24),List(s24)))
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|     from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<{s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}>]
|       value: StructNode : {s27: String', s24: String', s26: String', s25: String', s28: java.sql.Date'}
|         s27: Path s30.email : String'
|         s24: Path s30.id : String'
|         s26: Path s30.password : String'
|         s25: Path s30.name : String'
|         s28: Path s30.created : java.sql.Date'
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode atoken_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s27 -> 3, s24 -> 0, s26 -> 2, s25 -> 1, s28 -> 4
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', java.sql.Date')>]
|     from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<(String', String', String', String', java.sql.Date')>]
|       value: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s30.id : String'
|         2: Path s30.name : String'
|         3: Path s30.password : String'
|         4: Path s30.email : String'
|         5: Path s30.created : java.sql.Date'
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode atoken_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', java.sql.Date')>]
|     from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<(String', String', String', String', java.sql.Date')>]
|       value: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s30.id : String'
|         2: Path s30.name : String'
|         3: Path s30.password : String'
|         4: Path s30.email : String'
|         5: Path s30.created : java.sql.Date'
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode atoken_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23._1 : String'
|       2: Path s23._2 : String'
|       3: Path s23._3 : String'
|       4: Path s23._4 : String'
|       5: Path s23._5 : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', java.sql.Date')>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t29 : Vector[t29<(String', String', String', String', java.sql.Date')>]
|     value: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s30.id : String'
|       2: Path s30.name : String'
|       3: Path s30.password : String'
|       4: Path s30.email : String'
|       5: Path s30.created : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode atoken_1 (volatileHint=false) : String'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "name", "password", "email", "created" from "account" where "id" = 'atoken_1'" : Vector[t29<(String', String', String', String', java.sql.Date')>]

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: CompiledStatement "select "id", "name", "password", "email", "created" from "account" where "id" = 'atoken_1'" : Vector[t29<(String', String', String', String', java.sql.Date')>]
|   map: CompiledMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : java.sql.Date'

date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    1.383291 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.058125 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.108500 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    5.967416 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    1.206958 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    0.849125 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.288458 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    1.895625 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   12.081583 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    1.435209 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.124209 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.044792 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.106125 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.055208 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    0.259083 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    1.925375 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    6.622792 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.109209 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   10.623541 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.112792 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.026250 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    7.549250 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    5.521167 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   58.354083 ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "name", "password", "email", "created" from "account" where "id" = 'atoken_1']
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "name", "password", "email", "created" from "account" where "id" = 'atoken_1'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1916455347 wrapping select "id", "name", "password", "email", "created" from "account" where "id" = 'atoken_1'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1916455347 wrapping select "id", "name", "password", "email", "created" from "account" where "id" = 'atoken_1'
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /----+------+----------+-------+---------\
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1  | 2    | 3        | 4     | 5       |
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id | name | password | email | created |
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |----+------+----------+-------+---------|
date:2022-03-13 17:46:26	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \----+------+----------+-------+---------/
date:2022-03-13 17:46:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:47:06	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:47:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:48:06	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:48:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:49:06	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:49:20	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:49:20	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:49:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4f288e2d
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57b0db8a
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@31813363
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@69666c23
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6234dec4
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@33093583
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@b2b02aa
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@51767098
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1570468c
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6fafdc8c
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3cc2ad81
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1163079123 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@294909430 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1163079123 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:49:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@294909430 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ed2f831
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@49819141
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@585b6f41
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@715c7f6e
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@38861204
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7dc897cc
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7eeace53
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6cdf79ef
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@64415042
date:2022-03-13 17:49:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:49:21	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:49:22	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,access_token), (@t9,refresh_token), (@t9,id)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   13.928542 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.614333 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:   11.056291 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   18.750875 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    6.380250 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    7.394458 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.710292 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    6.808000 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   30.608000 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    7.298750 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.648417 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    2.160709 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    1.101708 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    1.560667 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.502000 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    6.513792 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   32.563083 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    2.822167 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   34.391041 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    2.476209 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.998167 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   14.752917 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   64.357167 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  273.397835 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1']
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1322749138 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1322749138 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------+--------------+---------------\
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1         | 2            | 3             |
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id        | access_token | refresh_token |
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------+--------------+---------------|
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | account_1 | atoken_1     | rtoken_1      |
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------+--------------+---------------/
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table account
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.name : String'
|           3: Path s4.password : String'
|           4: Path s4.email : String'
|           5: Path s4.created : java.sql.Date'
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table account
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.name : String'
|           3: Path s8.password : String'
|           4: Path s8.email : String'
|           5: Path s8.created : java.sql.Date'
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.account)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|   from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|   from s11: Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|     value: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|       0: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s11.id : String'
|         2: Path s11.name : String'
|         3: Path s11.password : String'
|         4: Path s11.email : String'
|         5: Path s11.created : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|   from s11: Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String', String', java.sql.Date')]>]
|     value: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|       0: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s11.id : String'
|         2: Path s11.name : String'
|         3: Path s11.password : String'
|         4: Path s11.email : String'
|         5: Path s11.created : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', String', String', java.sql.Date')>]
|   from s11: Bind : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<(String', String', String', String', java.sql.Date')>]
|     value: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s11.id : String'
|       2: Path s11.name : String'
|       3: Path s11.password : String'
|       4: Path s11.email : String'
|       5: Path s11.created : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', String', String', java.sql.Date')>]
|   from s11: Bind : Vector[t10<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       value: StructNode : {created: java.sql.Date', id: String', name: String', password: String', email: String'}
|         created: Path s6.created : java.sql.Date'
|         id: Path s6.id : String'
|         name: Path s6.name : String'
|         password: Path s6.password : String'
|         email: Path s6.email : String'
|   select: Pure t12 : Vector[t12<(String', String', String', String', java.sql.Date')>]
|     value: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s11.id : String'
|       2: Path s11.name : String'
|       3: Path s11.password : String'
|       4: Path s11.email : String'
|       5: Path s11.created : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.created with symbols 
| Path s6.created : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.created to:
| Path s6.created

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.name with symbols 
| Path s6.name : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.name to:
| Path s6.name

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.password with symbols 
| Path s6.password : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.password to:
| Path s6.password

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.email with symbols 
| Path s6.email : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.email to:
| Path s6.email

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   created: Path s6.created
|   id: Path s6.id
|   name: Path s6.name
|   password: Path s6.password
|   email: Path s6.email

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path created
| Path s6.created

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.created
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.id
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path name
| Path s6.name

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.name
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s6.password

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s6.password
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email
| Path s6.email

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s6.email
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13), UnassignedType)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.created
|     s14: Path s6.id
|     s15: Path s6.name
|     s16: Path s6.password
|     s17: Path s6.email

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s14

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.name with symbols t10
| Path s11.name : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.name with local part Path name over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.name to:
| Path s11.s15

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.password with symbols t10
| Path s11.password : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.password with local part Path password over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.password to:
| Path s11.s16

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.email with symbols t10
| Path s11.email : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.email with local part Path email over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.email to:
| Path s11.s17

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.created with symbols t10
| Path s11.created : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.created with local part Path created over t10
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.created to:
| Path s11.s13

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s14
|   2: Path s11.s15
|   3: Path s11.s16
|   4: Path s11.s17
|   5: Path s11.s13

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s14

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s14
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s15

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s11.s15
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s16

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s11.s16
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s11.s17

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Path s11.s17
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s11.s13

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s22 -> Path s11.s13
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (HashMap(List(_5) -> s22, List(_2) -> s19, List(_4) -> s21, List(_1) -> s18, List(_3) -> s20), UnassignedType)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s18: Path s11.s14
|     s19: Path s11.s15
|     s20: Path s11.s16
|     s21: Path s11.s17
|     s22: Path s11.s13

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|   from s11: Bind : Vector[t10<{s13: java.sql.Date', s14: String', s15: String', s16: String', s17: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: java.sql.Date', s14: String', s15: String', s16: String', s17: String'}>]
|       value: StructNode : {s13: java.sql.Date', s14: String', s15: String', s16: String', s17: String'}
|         s13: Path s6.created : java.sql.Date'
|         s14: Path s6.id : String'
|         s15: Path s6.name : String'
|         s16: Path s6.password : String'
|         s17: Path s6.email : String'
|   select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|     value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}
|       s18: Path s11.s14 : String'
|       s19: Path s11.s15 : String'
|       s20: Path s11.s16 : String'
|       s21: Path s11.s17 : String'
|       s22: Path s11.s13 : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|   from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|     value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}
|       s18: Path s6.id : String'
|       s19: Path s6.name : String'
|       s20: Path s6.password : String'
|       s21: Path s6.email : String'
|       s22: Path s6.created : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,name), (@t9,id), (@t9,created), (@t9,password), (@t9,email)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', String', String', java.sql.Date')]>
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', java.sql.Date')
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from java.sql.Date'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}>]
|       value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: java.sql.Date'}
|         s18: Path s6.id : String'
|         s19: Path s6.name : String'
|         s20: Path s6.password : String'
|         s21: Path s6.email : String'
|         s22: Path s6.created : java.sql.Date'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s18 : String'
|       2: Path s23.s19 : String'
|       3: Path s23.s20 : String'
|       4: Path s23.s21 : String'
|       5: Path s23.s22 : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s6.id,s24), 1 -> (Path s6.name,s25), 2 -> (Path s6.password,s26), 3 -> (Path s6.email,s27), 4 -> (Path s6.created,s28))
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Bind : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|     from s6: ...
|     select: Pure t29 : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|       value: StructNode : {s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}
|         s28: Path s6.created : java.sql.Date'
|         s26: Path s6.password : String'
|         s25: Path s6.name : String'
|         s24: Path s6.id : String'
|         s27: Path s6.email : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Bind : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t29 : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|       value: StructNode : {s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}
|         s28: Path s6.created : java.sql.Date'
|         s26: Path s6.password : String'
|         s25: Path s6.name : String'
|         s24: Path s6.id : String'
|         s27: Path s6.email : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,created),List(created)), ((@t9,password),List(password)), ((@t9,name),List(name)), ((@t9,email),List(email)))
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s30, None, None, ConstArray(), None, None, None, None, false : Vector[t31<{s32: String', s33: java.sql.Date', s34: String', s35: String', s36: String'}>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t31 : Vector[t31<{s32: String', s33: java.sql.Date', s34: String', s35: String', s36: String'}>]
|     value: StructNode : {s32: String', s33: java.sql.Date', s34: String', s35: String', s36: String'}
|       s32: Path s30.id : String'
|       s33: Path s30.created : java.sql.Date'
|       s34: Path s30.password : String'
|       s35: Path s30.name : String'
|       s36: Path s30.email : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t9,name) -> s35, (@t9,id) -> s32, (@t9,created) -> s33, (@t9,password) -> s34, (@t9,email) -> s36)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<{s32: String', s33: java.sql.Date', s34: String', s35: String', s36: String'}>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t31 : Vector[t31<{s32: String', s33: java.sql.Date', s34: String', s35: String', s36: String'}>]
|     value: StructNode : {s32: String', s33: java.sql.Date', s34: String', s35: String', s36: String'}
|       s32: Path s30.id : String'
|       s33: Path s30.created : java.sql.Date'
|       s34: Path s30.password : String'
|       s35: Path s30.name : String'
|       s36: Path s30.email : String'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|   from s6: ...
|   select: Pure t29 : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|     value: StructNode : {s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}
|       s28: Path s6.created : java.sql.Date'
|       s26: Path s6.password : String'
|       s25: Path s6.name : String'
|       s24: Path s6.id : String'
|       s27: Path s6.email : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t29 : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|     value: StructNode : {s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}
|       s28: Path s30.created : java.sql.Date'
|       s26: Path s30.password : String'
|       s25: Path s30.name : String'
|       s24: Path s30.id : String'
|       s27: Path s30.email : String'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t29,s27) -> s27, (t29,s26) -> s26, (t29,s25) -> s25, (t29,s24) -> s24, (t29,s28) -> s28)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t29,s27),List(s27)), ((t29,s26),List(s26)), ((t29,s25),List(s25)), ((t29,s24),List(s24)), ((t29,s28),List(s28)))
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|     from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<{s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}>]
|       value: StructNode : {s28: java.sql.Date', s26: String', s25: String', s24: String', s27: String'}
|         s28: Path s30.created : java.sql.Date'
|         s26: Path s30.password : String'
|         s25: Path s30.name : String'
|         s24: Path s30.id : String'
|         s27: Path s30.email : String'
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s28 -> 4, s26 -> 2, s25 -> 1, s24 -> 0, s27 -> 3
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', java.sql.Date')>]
|     from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<(String', String', String', String', java.sql.Date')>]
|       value: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s30.id : String'
|         2: Path s30.name : String'
|         3: Path s30.password : String'
|         4: Path s30.email : String'
|         5: Path s30.created : java.sql.Date'
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', java.sql.Date')>]
|     from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<(String', String', String', String', java.sql.Date')>]
|       value: ProductNode : (String', String', String', String', java.sql.Date')
|         1: Path s30.id : String'
|         2: Path s30.name : String'
|         3: Path s30.password : String'
|         4: Path s30.email : String'
|         5: Path s30.created : java.sql.Date'
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     0: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s23._1 : String'
|       2: Path s23._2 : String'
|       3: Path s23._3 : String'
|       4: Path s23._4 : String'
|       5: Path s23._5 : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', java.sql.Date')>]
|   from s30: Table account : Vector[@t9<{created: java.sql.Date', id: String', name: String', password: String', email: String'}>]
|   select: Pure t29 : Vector[t29<(String', String', String', String', java.sql.Date')>]
|     value: ProductNode : (String', String', String', String', java.sql.Date')
|       1: Path s30.id : String'
|       2: Path s30.name : String'
|       3: Path s30.password : String'
|       4: Path s30.email : String'
|       5: Path s30.created : java.sql.Date'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'" : Vector[t29<(String', String', String', String', java.sql.Date')>]

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', java.sql.Date')]]
|   from s23: CompiledStatement "select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'" : Vector[t29<(String', String', String', String', java.sql.Date')>]
|   map: CompiledMapping : Mapped[(String', String', String', String', java.sql.Date')]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : java.sql.Date'

date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    2.627334 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.081625 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    1.120333 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    7.834000 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    3.251042 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    1.394209 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.032625 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:   11.338750 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   29.538792 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    4.369625 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.259417 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.072458 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.027708 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.286292 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    1.960083 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    3.030833 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:    6.747542 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.116791 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   13.003750 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.597791 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.033333 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    4.614834 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    4.635042 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   96.974209 ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1']
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@11736016 wrapping select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@11736016 wrapping select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /----+------+----------+-------+---------\
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1  | 2    | 3        | 4     | 5       |
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id | name | password | email | created |
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |----+------+----------+-------+---------|
date:2022-03-13 17:49:24	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \----+------+----------+-------+---------/
date:2022-03-13 17:49:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:50:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:50:52	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:50:52	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:50:52	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1513468f
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5c360c2f
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@792b2570
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ad29dff
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@75fa9b14
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@19c1a6f0
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@39e1101d
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57b25fbb
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@76b15c62
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@62d39262
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@530307dd
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1609d581
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6a27d96e
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2128955633 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@143694892 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2128955633 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:50:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@143694892 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE NOT NULL
)
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@149906ca
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5f6fd66b
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@712b5da
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@532af0ff
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@f591306
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2e244008
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3c0a8c73
date:2022-03-13 17:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:50:53	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:50:54	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:51:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:51:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:52:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:52:34	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:52:34	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:52:34	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4f119cea
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6c231999
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5110639d
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@222a9396
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@611fbdf5
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@15048f9e
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@47da1a28
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@319a8766
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2df674b5
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c3f76ea
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@ba3341f
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6e6723ba
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@70aaa11f
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@174511c6
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@554ccfd
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5279551e
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@253789108 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@734982124 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@734982124 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:52:35	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@253789108 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@777eb417
date:2022-03-13 17:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@480a501f
date:2022-03-13 17:52:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6b1a5ec7
date:2022-03-13 17:52:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@73d3371f
date:2022-03-13 17:52:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:52:36	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:52:36	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:53:09	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:53:09	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:53:09	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@34856256
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c82d70a
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ff0129a
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1b835527
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@48b03d3
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1eabbecf
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@41101b42
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@40bb442a
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c724275
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1383820228 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@811548201 wrapping drop table "account"
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1383820228 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@811548201 wrapping drop table "account"
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5f6cdaf2
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 9ms
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@79205275 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@79205275 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@418673469 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@418673469 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1120296923 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1120296923 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 17:53:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 906µs
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1ee71056
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4e79db4
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@a0806b7
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@338af64e
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@15c935c9
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2d7b00f9
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@670c965f
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3503476
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5f6b3ea8
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a629174
date:2022-03-13 17:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:53:10	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:53:11	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:53:39	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 17:53:57	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 17:53:57	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7f5a3521
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5726585f
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5d70ab15
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@361e03e3
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@18c3cb3c
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d428cdb
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2532a865
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@63f5b63b
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@65691b52
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 17:53:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c247770
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1572196440 wrapping drop table "account"
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2029133907 wrapping drop table "bearer_token"
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1572196440 wrapping drop table "account"
date:2022-03-13 17:53:57	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2029133907 wrapping drop table "bearer_token"
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 10ms
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 12ms
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1150103607 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1150103607 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1805570076 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1805570076 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@200237247 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@18118170 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@18118170 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@200237247 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3ce59711
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@158199360 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@158199360 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2029910444 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2029910444 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 622µs
date:2022-03-13 17:53:58	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 460µs
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@72efbad8
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ff18c5c
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@70c1ff25
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@608cb333
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6fbafc80
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3c7a0e47
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@433de63a
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@462dd045
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ecb7afc
date:2022-03-13 17:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:53:58	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 17:53:58	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 17:54:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.access_token : String'
|           3: Path s4.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table bearer_token
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.access_token : String'
|           3: Path s8.refresh_token : Option[String']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.bearer_token)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', Option[String'])]>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', Option[String'])]>]
|     value: TypeMapping : Mapped[(String', String', Option[String'])]
|       0: ProductNode : (String', String', Option[String'])
|         1: Path s11.id : String'
|         2: Path s11.access_token : String'
|         3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{id: String', access_token: String', refresh_token: Option[String']}>>]
|       value: Ref s6 : @t9<{id: String', access_token: String', refresh_token: Option[String']}>
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', Option[String'])>]
|   from s11: Bind : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{id: String', access_token: String', refresh_token: Option[String']}>]
|       value: StructNode : {id: String', access_token: String', refresh_token: Option[String']}
|         id: Path s6.id : String'
|         access_token: Path s6.access_token : String'
|         refresh_token: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s11.id : String'
|       2: Path s11.access_token : String'
|       3: Path s11.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.access_token with symbols 
| Path s6.access_token : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.access_token to:
| Path s6.access_token

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.refresh_token with symbols 
| Path s6.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.refresh_token to:
| Path s6.refresh_token

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   id: Path s6.id
|   access_token: Path s6.access_token
|   refresh_token: Path s6.refresh_token

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.id
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path access_token
| Path s6.access_token

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.access_token
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path refresh_token
| Path s6.refresh_token

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.refresh_token
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13), UnassignedType)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.id
|     s14: Path s6.access_token
|     s15: Path s6.refresh_token

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s13

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.access_token with symbols t10
| Path s11.access_token : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.access_token with local part Path access_token over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.access_token to:
| Path s11.s14

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.refresh_token with symbols t10
| Path s11.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.refresh_token with local part Path refresh_token over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: Map(List(access_token) -> s14, List(refresh_token) -> s15, List(id) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.refresh_token to:
| Path s11.s15

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s13
|   2: Path s11.s14
|   3: Path s11.s15

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s13

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s11.s13
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s14

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s11.s14
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s15

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s15
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (Map(List(_2) -> s17, List(_1) -> s16, List(_3) -> s18), UnassignedType)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s16: Path s11.s13
|     s17: Path s11.s14
|     s18: Path s11.s15

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s11: Bind : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: String', s14: String', s15: Option[String']}>]
|       value: StructNode : {s13: String', s14: String', s15: Option[String']}
|         s13: Path s6.id : String'
|         s14: Path s6.access_token : String'
|         s15: Path s6.refresh_token : Option[String']
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s11.s13 : String'
|       s17: Path s11.s14 : String'
|       s18: Path s11.s15 : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|   from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     value: StructNode : {s16: String', s17: String', s18: Option[String']}
|       s16: Path s6.id : String'
|       s17: Path s6.access_token : String'
|       s18: Path s6.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,id), (@t9,access_token), (@t9,refresh_token)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', Option[String'])]>
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', Option[String'])
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[String']
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s16: String', s17: String', s18: Option[String']}>]
|       value: StructNode : {s16: String', s17: String', s18: Option[String']}
|         s16: Path s6.id : String'
|         s17: Path s6.access_token : String'
|         s18: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s16 : String'
|       2: Path s19.s17 : String'
|       3: Path s19.s18 : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: Map(0 -> (Path s6.id,s20), 1 -> (Path s6.access_token,s21), 2 -> (Path s6.refresh_token,s22))
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: ...
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s6: Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       from s7: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s6.id : String'
|         s21: Path s6.access_token : String'
|         s22: Path s6.refresh_token : Option[String']
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,access_token),List(access_token)), ((@t9,refresh_token),List(refresh_token)))
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s24, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((@t9,id) -> s26, (@t9,access_token) -> s27, (@t9,refresh_token) -> s28)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t25 : Vector[t25<{s26: String', s27: String', s28: Option[String']}>]
|     value: StructNode : {s26: String', s27: String', s28: Option[String']}
|       s26: Path s24.id : String'
|       s27: Path s24.access_token : String'
|       s28: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s6: ...
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s6.id : String'
|       s21: Path s6.access_token : String'
|       s22: Path s6.refresh_token : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     value: StructNode : {s20: String', s21: String', s22: Option[String']}
|       s20: Path s24.id : String'
|       s21: Path s24.access_token : String'
|       s22: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: Map((t23,s20) -> s20, (t23,s21) -> s21, (t23,s22) -> s22)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t23,s20),List(s20)), ((t23,s21),List(s21)), ((t23,s22),List(s22)))
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<{s20: String', s21: String', s22: Option[String']}>]
|       value: StructNode : {s20: String', s21: String', s22: Option[String']}
|         s20: Path s24.id : String'
|         s21: Path s24.access_token : String'
|         s22: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s20 -> 0, s21 -> 1, s22 -> 2
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19.s20 : String'
|       2: Path s19.s21 : String'
|       3: Path s19.s22 : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|     from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|     select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|       value: ProductNode : (String', String', Option[String'])
|         1: Path s24.id : String'
|         2: Path s24.access_token : String'
|         3: Path s24.refresh_token : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s24.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', Option[String'])]
|     0: ProductNode : (String', String', Option[String'])
|       1: Path s19._1 : String'
|       2: Path s19._2 : String'
|       3: Path s19._3 : Option[String']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s24, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t23<(String', String', Option[String'])>]
|   from s24: Table bearer_token : Vector[@t9<{id: String', access_token: String', refresh_token: Option[String']}>]
|   select: Pure t23 : Vector[t23<(String', String', Option[String'])>]
|     value: ProductNode : (String', String', Option[String'])
|       1: Path s24.id : String'
|       2: Path s24.access_token : String'
|       3: Path s24.refresh_token : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s24.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Option[String'])]]
|   from s19: CompiledStatement "select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'" : Vector[t23<(String', String', Option[String'])>]
|   map: CompiledMapping : Mapped[(String', String', Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:   13.889000 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    2.067208 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    9.269334 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:   21.727834 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    6.373916 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    6.991291 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.606083 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    6.898583 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   31.181375 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    9.707584 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    1.690333 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.948292 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.449459 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.762459 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    4.387542 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    5.284708 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   27.075209 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    3.126000 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   33.505375 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    1.189042 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.195167 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:   30.733167 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:   40.306542 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:  258.365503 ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1']
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@524749727 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@524749727 wrapping select "id", "access_token", "refresh_token" from "bearer_token" where "id" = 'account_1'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------+--------------+---------------\
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1         | 2            | 3             |
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id        | access_token | refresh_token |
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------+--------------+---------------|
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | account_1 | atoken_1     | rtoken_1      |
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------+--------------+---------------/
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table account
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.id : String'
|           2: Path s4.name : String'
|           3: Path s4.password : String'
|           4: Path s4.email : String'
|           5: Path s4.created : Option[java.sql.Date']
|     where: Apply Function =
|       0: Path s3.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t5
|     value: Ref s2

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.AssignUniqueSymbols              	message: Detected features: UsedFeatures(false,true,false,false)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase assignUniqueSymbols:
| Bind
|   from s6: Filter s7
|     from s7: TableExpansion
|       table s8: Table account
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s8.id : String'
|           2: Path s8.name : String'
|           3: Path s8.password : String'
|           4: Path s8.email : String'
|           5: Path s8.created : Option[java.sql.Date']
|     where: Apply Function =
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false)
|   select: Pure t10
|     value: Ref s6

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase unrollTailBinds: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase inferTypes: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Found Selects for NominalTypes: @(slick.jdbc.PostgresProfile$._.account)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: With correct table types:
| Bind : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|   from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t10 : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|     value: Ref s6 : @t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Table expansions: @t9 -> (s8,TypeMapping)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.ExpandTables                     	message: Expanding tables in result type
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', String', String', Option[java.sql.Date'])]>]
|   from s11: Bind : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String', String', Option[java.sql.Date'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|       0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|         1: Path s11.id : String'
|         2: Path s11.name : String'
|         3: Path s11.password : String'
|         4: Path s11.email : String'
|         5: Path s11.created : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', String', String', Option[java.sql.Date'])]>]
|   from s11: Bind : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String', String', Option[java.sql.Date'])]>]
|     value: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|       0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|         1: Path s11.id : String'
|         2: Path s11.name : String'
|         3: Path s11.password : String'
|         4: Path s11.email : String'
|         5: Path s11.created : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', String', String', Option[java.sql.Date'])>]
|   from s11: Bind : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|     from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>>]
|       value: Ref s6 : @t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>
|   select: Pure t12 : Vector[t12<(String', String', String', String', Option[java.sql.Date'])>]
|     value: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s11.id : String'
|       2: Path s11.name : String'
|       3: Path s11.password : String'
|       4: Path s11.email : String'
|       5: Path s11.created : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandSums: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase expandRecords:
| Bind : Vector[t12<(String', String', String', String', Option[java.sql.Date'])>]
|   from s11: Bind : Vector[t10<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       value: StructNode : {created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}
|         created: Path s6.created : Option[java.sql.Date']
|         id: Path s6.id : String'
|         name: Path s6.name : String'
|         password: Path s6.password : String'
|         email: Path s6.email : String'
|   select: Pure t12 : Vector[t12<(String', String', String', String', Option[java.sql.Date'])>]
|     value: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s11.id : String'
|       2: Path s11.name : String'
|       3: Path s11.password : String'
|       4: Path s11.email : String'
|       5: Path s11.created : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s7.id with symbols 
| Path s7.id : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s7.id to:
| Path s7.id

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.created with symbols 
| Path s6.created : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.created to:
| Path s6.created

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.id with symbols 
| Path s6.id : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.id to:
| Path s6.id

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.name with symbols 
| Path s6.name : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.name to:
| Path s6.name

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.password with symbols 
| Path s6.password : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.password to:
| Path s6.password

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s6.email with symbols 
| Path s6.email : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s6.email to:
| Path s6.email

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| StructNode
|   created: Path s6.created
|   id: Path s6.id
|   name: Path s6.name
|   password: Path s6.password
|   email: Path s6.email

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path created
| Path s6.created

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s13 -> Path s6.created
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path id
| Path s6.id

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s14 -> Path s6.id
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path name
| Path s6.name

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s15 -> Path s6.name
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path password
| Path s6.password

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s16 -> Path s6.password
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path email
| Path s6.email

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s17 -> Path s6.email
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t10: (HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13), UnassignedType)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t10
|   value: StructNode
|     s13: Path s6.created
|     s14: Path s6.id
|     s15: Path s6.name
|     s16: Path s6.password
|     s17: Path s6.email

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening projection t12
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.id with symbols t10
| Path s11.id : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.id with local part Path id over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.id to:
| Path s11.s14

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.name with symbols t10
| Path s11.name : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.name with local part Path name over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.name to:
| Path s11.s15

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.password with symbols t10
| Path s11.password : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.password with local part Path password over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.password to:
| Path s11.s16

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.email with symbols t10
| Path s11.email : String'

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.email with local part Path email over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.email to:
| Path s11.s17

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Analyzing s11.created with symbols t10
| Path s11.created : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Found s11.created with local part Path created over t10
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message:   Translation for t10: HashMap(List(email) -> s17, List(name) -> s15, List(password) -> s16, List(id) -> s14, List(created) -> s13)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Translated s11.created to:
| Path s11.s13

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path 
| ProductNode
|   1: Path s11.s14
|   2: Path s11.s15
|   3: Path s11.s16
|   4: Path s11.s17
|   5: Path s11.s13

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _1
| Path s11.s14

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s18 -> Path s11.s14
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _2
| Path s11.s15

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s19 -> Path s11.s15
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _3
| Path s11.s16

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s20 -> Path s11.s16
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _4
| Path s11.s17

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s21 -> Path s11.s17
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattening node at Path _5
| Path s11.s13

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding definition: s22 -> Path s11.s13
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Adding translation for t12: (HashMap(List(_5) -> s22, List(_2) -> s19, List(_4) -> s21, List(_1) -> s18, List(_3) -> s20), UnassignedType)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.FlattenProjections               	message: Flattened projection to
| Pure t12
|   value: StructNode
|     s18: Path s11.s14
|     s19: Path s11.s15
|     s20: Path s11.s16
|     s21: Path s11.s17
|     s22: Path s11.s13

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase flattenProjections:
| Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}>]
|   from s11: Bind : Vector[t10<{s13: Option[java.sql.Date'], s14: String', s15: String', s16: String', s17: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t10 : Vector[t10<{s13: Option[java.sql.Date'], s14: String', s15: String', s16: String', s17: String'}>]
|       value: StructNode : {s13: Option[java.sql.Date'], s14: String', s15: String', s16: String', s17: String'}
|         s13: Path s6.created : Option[java.sql.Date']
|         s14: Path s6.id : String'
|         s15: Path s6.name : String'
|         s16: Path s6.password : String'
|         s17: Path s6.email : String'
|   select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}>]
|     value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}
|       s18: Path s11.s14 : String'
|       s19: Path s11.s15 : String'
|       s20: Path s11.s16 : String'
|       s21: Path s11.s17 : String'
|       s22: Path s11.s13 : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.RewriteJoins                     	message: Bind(s11) is aliasing. Merging Bind(s11, Bind(s6)) to Bind(s6)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase rewriteJoins:
| Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}>]
|   from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s7.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}>]
|     value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}
|       s18: Path s6.id : String'
|       s19: Path s6.name : String'
|       s20: Path s6.password : String'
|       s21: Path s6.email : String'
|       s22: Path s6.created : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase verifySymbols: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase relabelUnions: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createAggregates: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase resolveZipJoins: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.PruneProjections                 	message: Unreferenced: t12; Field refs: (@t9,name), (@t9,password), (@t9,id), (@t9,created), (@t9,email)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase pruneProjections: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from t12<Mapped[(String', String', String', String', Option[java.sql.Date'])]>
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from (String', String', String', String', Option[java.sql.Date'])
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from String'
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.CreateResultSetMapping           	message: Creating mapping from Option[java.sql.Date']
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Option[java.sql.Date'])]]
|   from s23: Bind : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}>]
|     from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t12 : Vector[t12<{s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}>]
|       value: StructNode : {s18: String', s19: String', s20: String', s21: String', s22: Option[java.sql.Date']}
|         s18: Path s6.id : String'
|         s19: Path s6.name : String'
|         s20: Path s6.password : String'
|         s21: Path s6.email : String'
|         s22: Path s6.created : Option[java.sql.Date']
|   map: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s23.s18 : String'
|       2: Path s23.s19 : String'
|       3: Path s23.s20 : String'
|       4: Path s23.s21 : String'
|       5: Path s23.s22 : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: Hoisting operations from defs: 
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New defs: HashMap(0 -> (Path s6.id,s24), 1 -> (Path s6.name,s25), 2 -> (Path s6.password,s26), 3 -> (Path s6.email,s27), 4 -> (Path s6.created,s28))
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.HoistClientOps                   	message: New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Option[java.sql.Date'])]]
|   from s23: Bind : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|     from s6: ...
|     select: Pure t29 : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|       value: StructNode : {s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}
|         s28: Path s6.created : Option[java.sql.Date']
|         s24: Path s6.id : String'
|         s26: Path s6.password : String'
|         s27: Path s6.email : String'
|         s25: Path s6.name : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Option[java.sql.Date'])]]
|   from s23: Bind : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|     from s6: Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       from s7: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s7.id : String'
|         1: LiteralNode account_1 (volatileHint=false) : String'
|     select: Pure t29 : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|       value: StructNode : {s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}
|         s28: Path s6.created : Option[java.sql.Date']
|         s24: Path s6.id : String'
|         s26: Path s6.password : String'
|         s27: Path s6.email : String'
|         s25: Path s6.name : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : Option[java.sql.Date']

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase reorderOperations: (no change)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Table fields: MapView(<not computed>)
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Creating source from TableNode:
| Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]

date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((@t9,id),List(id)), ((@t9,created),List(created)), ((@t9,password),List(password)), ((@t9,email),List(email)), ((@t9,name),List(name)))
date:2022-03-13 17:54:53	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Building new Comprehension from:
| Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Built new Comprehension:
| Comprehension s30, None, None, ConstArray(), None, None, None, None, false : Vector[t31<{s32: String', s33: Option[java.sql.Date'], s34: String', s35: String', s36: String'}>]
|   from s30: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|   select: Pure t31 : Vector[t31<{s32: String', s33: Option[java.sql.Date'], s34: String', s35: String', s36: String'}>]
|     value: StructNode : {s32: String', s33: Option[java.sql.Date'], s34: String', s35: String', s36: String'}
|       s32: Path s30.id : String'
|       s33: Path s30.created : Option[java.sql.Date']
|       s34: Path s30.password : String'
|       s35: Path s30.email : String'
|       s36: Path s30.name : String'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((@t9,name) -> s36, (@t9,password) -> s34, (@t9,id) -> s32, (@t9,created) -> s33, (@t9,email) -> s35)
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Filter into Comprehension:
| Filter s7 : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Filter into Comprehension:
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<{s32: String', s33: Option[java.sql.Date'], s34: String', s35: String', s36: String'}>]
|   from s30: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|   select: Pure t31 : Vector[t31<{s32: String', s33: Option[java.sql.Date'], s34: String', s35: String', s36: String'}>]
|     value: StructNode : {s32: String', s33: Option[java.sql.Date'], s34: String', s35: String', s36: String'}
|       s32: Path s30.id : String'
|       s33: Path s30.created : Option[java.sql.Date']
|       s34: Path s30.password : String'
|       s35: Path s30.email : String'
|       s36: Path s30.name : String'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merging Bind into Comprehension as 'select':
| Bind : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|   from s6: ...
|   select: Pure t29 : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|     value: StructNode : {s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}
|       s28: Path s6.created : Option[java.sql.Date']
|       s24: Path s6.id : String'
|       s26: Path s6.password : String'
|       s27: Path s6.email : String'
|       s25: Path s6.name : String'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Merged Bind into Comprehension as 'select':
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|   from s30: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|   select: Pure t29 : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|     value: StructNode : {s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}
|       s28: Path s30.created : Option[java.sql.Date']
|       s24: Path s30.id : String'
|       s26: Path s30.password : String'
|       s27: Path s30.email : String'
|       s25: Path s30.name : String'
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Replacements are: HashMap((t29,s26) -> s26, (t29,s24) -> s24, (t29,s25) -> s25, (t29,s28) -> s28, (t29,s27) -> s27)
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.MergeToComprehensions            	message: Mappings are: ConstArray(((t29,s26),List(s26)), ((t29,s24),List(s24)), ((t29,s25),List(s25)), ((t29,s28),List(s28)), ((t29,s27),List(s27)))
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Option[java.sql.Date'])]]
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|     from s30: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<{s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}>]
|       value: StructNode : {s28: Option[java.sql.Date'], s24: String', s26: String', s27: String', s25: String'}
|         s28: Path s30.created : Option[java.sql.Date']
|         s24: Path s30.id : String'
|         s26: Path s30.password : String'
|         s27: Path s30.email : String'
|         s25: Path s30.name : String'
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : Option[java.sql.Date']

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase optimizeScalar: (no change)
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase fixRowNumberOrdering: (no change)
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Required symbols: s28 -> 4, s24 -> 0, s26 -> 2, s27 -> 3, s25 -> 1
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.RemoveFieldNames                 	message: Transformed RSM: 
| ResultSetMapping
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]
|     from s30: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]
|       value: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|         1: Path s30.id : String'
|         2: Path s30.name : String'
|         3: Path s30.password : String'
|         4: Path s30.email : String'
|         5: Path s30.created : Option[java.sql.Date']
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s23.s24 : String'
|       2: Path s23.s25 : String'
|       3: Path s23.s26 : String'
|       4: Path s23.s27 : String'
|       5: Path s23.s28 : Option[java.sql.Date']

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Option[java.sql.Date'])]]
|   from s23: Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]
|     from s30: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|     select: Pure t29 : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]
|       value: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|         1: Path s30.id : String'
|         2: Path s30.name : String'
|         3: Path s30.password : String'
|         4: Path s30.email : String'
|         5: Path s30.created : Option[java.sql.Date']
|     where: Apply Function = : Boolean
|       0: Path s30.id : String'
|       1: LiteralNode account_1 (volatileHint=false) : String'
|   map: TypeMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|     0: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s23._1 : String'
|       2: Path s23._2 : String'
|       3: Path s23._3 : String'
|       4: Path s23._4 : String'
|       5: Path s23._5 : Option[java.sql.Date']

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiling server-side and mapping with server-side:
| Comprehension s30, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]
|   from s30: Table account : Vector[@t9<{created: Option[java.sql.Date'], id: String', name: String', password: String', email: String'}>]
|   select: Pure t29 : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]
|     value: ProductNode : (String', String', String', String', Option[java.sql.Date'])
|       1: Path s30.id : String'
|       2: Path s30.name : String'
|       3: Path s30.password : String'
|       4: Path s30.email : String'
|       5: Path s30.created : Option[java.sql.Date']
|   where: Apply Function = : Boolean
|     0: Path s30.id : String'
|     1: LiteralNode account_1 (volatileHint=false) : String'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.relational.ResultConverterCompiler        	message: Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|     5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Date'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.CodeGen                          	message: Compiled server-side to:
| CompiledStatement "select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'" : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompiler                    	message: After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String', String', Option[java.sql.Date'])]]
|   from s23: CompiledStatement "select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'" : Vector[t29<(String', String', String', String', Option[java.sql.Date'])>]
|   map: CompiledMapping : Mapped[(String', String', String', String', Option[java.sql.Date'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$1 idx=4, name=<computed> : String'
|         5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Date'

date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message: ------------------- Phase: Time ---------
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:       assignUniqueSymbols:    4.424875 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           unrollTailBinds:    0.146083 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                inferTypes:    0.191250 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              expandTables:    5.022958 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           forceOuterBinds:    5.658625 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         removeMappedTypes:    3.346334 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                expandSums:    0.033917 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             expandRecords:    2.882458 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:        flattenProjections:   22.824375 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:              rewriteJoins:    6.313458 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             verifySymbols:    0.198542 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:             relabelUnions:    0.130666 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          createAggregates:    0.023250 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:           resolveZipJoins:    0.065667 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          pruneProjections:    2.256250 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:    createResultSetMapping:    4.690917 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            hoistClientOps:   10.021709 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:         reorderOperations:    0.153958 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:     mergeToComprehensions:   11.663625 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:            optimizeScalar:    0.136916 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:      fixRowNumberOrdering:    0.022541 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:          removeFieldNames:    5.182500 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                   codeGen:    6.029375 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.compiler.QueryCompilerBenchmark           	message:                     TOTAL:   91.420249 ms
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: result [select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1']
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@850452967 wrapping select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@850452967 wrapping select "id", "name", "password", "email", "created" from "account" where "id" = 'account_1'
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 963µs
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: /-----------+-----------+-----------+----------------+---------\
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | 1         | 2         | 3         | 4              | 5       |
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | id        | name      | password  | email          | created |
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: |-----------+-----------+-----------+----------------+---------|
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: | account_1 | John Page | john_pass | john@email.com | NULL    |
date:2022-03-13 17:54:54	level: DEBUG	logger: slick.jdbc.StatementInvoker.result              	message: \-----------+-----------+-----------+----------------+---------/
date:2022-03-13 17:54:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:55:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:55:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:56:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:56:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:57:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:57:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:58:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:58:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:59:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 17:59:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:00:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:00:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:01:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:01:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:02:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:02:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:03:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:03:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:04:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:04:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:05:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:05:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:06:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:06:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:07:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:07:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:08:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:08:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:09:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:09:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:10:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:10:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:11:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:11:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:12:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:12:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:13:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:13:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:14:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:14:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:15:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:15:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:16:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:16:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:17:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:17:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:18:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:18:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:19:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:19:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:20:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:20:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:21:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:21:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:22:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:22:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:23:13	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5ff18c5c: (connection has passed maxLifetime)
date:2022-03-13 18:23:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@499b3466
date:2022-03-13 18:23:16	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@433de63a: (connection has passed maxLifetime)
date:2022-03-13 18:23:16	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@475cd325
date:2022-03-13 18:23:17	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@70c1ff25: (connection has passed maxLifetime)
date:2022-03-13 18:23:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@43635f16
date:2022-03-13 18:23:18	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7f5a3521: (connection has passed maxLifetime)
date:2022-03-13 18:23:18	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@661d91e
date:2022-03-13 18:23:24	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@608cb333: (connection has passed maxLifetime)
date:2022-03-13 18:23:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5071f774
date:2022-03-13 18:23:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:23:29	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@c247770: (connection has passed maxLifetime)
date:2022-03-13 18:23:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5eb6030a
date:2022-03-13 18:23:30	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5726585f: (connection has passed maxLifetime)
date:2022-03-13 18:23:30	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@72efbad8: (connection has passed maxLifetime)
date:2022-03-13 18:23:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5a899c04
date:2022-03-13 18:23:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1f8b0931
date:2022-03-13 18:23:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:23:30	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@462dd045: (connection has passed maxLifetime)
date:2022-03-13 18:23:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@409e87e3
date:2022-03-13 18:23:32	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@2532a865: (connection has passed maxLifetime)
date:2022-03-13 18:23:32	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2e5e72a9
date:2022-03-13 18:23:37	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@18c3cb3c: (connection has passed maxLifetime)
date:2022-03-13 18:23:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@38a1a2da
date:2022-03-13 18:23:39	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5d70ab15: (connection has passed maxLifetime)
date:2022-03-13 18:23:39	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7fa4f67e
date:2022-03-13 18:23:40	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7ecb7afc: (connection has passed maxLifetime)
date:2022-03-13 18:23:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4bb1c7f6
date:2022-03-13 18:23:42	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3ce59711: (connection has passed maxLifetime)
date:2022-03-13 18:23:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@16a72f13
date:2022-03-13 18:23:42	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@65691b52: (connection has passed maxLifetime)
date:2022-03-13 18:23:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@23a5e86f
date:2022-03-13 18:23:44	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@361e03e3: (connection has passed maxLifetime)
date:2022-03-13 18:23:44	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7beaed63
date:2022-03-13 18:23:51	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7d428cdb: (connection has passed maxLifetime)
date:2022-03-13 18:23:51	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1165f538
date:2022-03-13 18:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3c7a0e47: (connection has passed maxLifetime)
date:2022-03-13 18:23:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1fa20964
date:2022-03-13 18:23:55	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@63f5b63b: (connection has passed maxLifetime)
date:2022-03-13 18:23:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1b9d9e48
date:2022-03-13 18:23:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:23:58	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6fbafc80: (connection has passed maxLifetime)
date:2022-03-13 18:23:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5e9f035f
date:2022-03-13 18:24:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:24:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:25:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:25:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:26:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:26:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:27:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:27:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:28:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:28:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:29:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:29:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:30:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:30:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:31:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:31:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:32:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:32:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:33:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:33:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:34:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:34:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:35:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:35:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:36:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:36:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:37:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:37:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:38:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:38:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:39:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:39:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:40:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:40:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:41:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:41:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:42:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:42:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:43:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:43:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:44:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:44:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:45:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:45:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:46:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:46:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:47:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:47:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:48:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:48:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:49:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:49:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:50:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:50:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:51:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:51:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:52:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:52:41	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@499b3466: (connection has passed maxLifetime)
date:2022-03-13 18:52:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@49a7bfcb
date:2022-03-13 18:52:44	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5071f774: (connection has passed maxLifetime)
date:2022-03-13 18:52:44	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4760588f
date:2022-03-13 18:52:44	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@43635f16: (connection has passed maxLifetime)
date:2022-03-13 18:52:44	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@435fd4bb
date:2022-03-13 18:52:54	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@475cd325: (connection has passed maxLifetime)
date:2022-03-13 18:52:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@680603c3
date:2022-03-13 18:52:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:52:59	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4bb1c7f6: (connection has passed maxLifetime)
date:2022-03-13 18:52:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5277907e
date:2022-03-13 18:53:05	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@2e5e72a9: (connection has passed maxLifetime)
date:2022-03-13 18:53:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5525f1cf
date:2022-03-13 18:53:07	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@23a5e86f: (connection has passed maxLifetime)
date:2022-03-13 18:53:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5be2051b
date:2022-03-13 18:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1f8b0931: (connection has passed maxLifetime)
date:2022-03-13 18:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fdd9abf
date:2022-03-13 18:53:12	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@38a1a2da: (connection has passed maxLifetime)
date:2022-03-13 18:53:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1adf0f20
date:2022-03-13 18:53:12	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@661d91e: (connection has passed maxLifetime)
date:2022-03-13 18:53:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@600e3e3d
date:2022-03-13 18:53:20	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1fa20964: (connection has passed maxLifetime)
date:2022-03-13 18:53:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3008054f
date:2022-03-13 18:53:20	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5eb6030a: (connection has passed maxLifetime)
date:2022-03-13 18:53:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3ecffd3e
date:2022-03-13 18:53:25	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7fa4f67e: (connection has passed maxLifetime)
date:2022-03-13 18:53:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d03ae7c
date:2022-03-13 18:53:26	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1165f538: (connection has passed maxLifetime)
date:2022-03-13 18:53:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@73c45fac
date:2022-03-13 18:53:26	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@409e87e3: (connection has passed maxLifetime)
date:2022-03-13 18:53:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@77fbc50c
date:2022-03-13 18:53:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:53:28	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5a899c04: (connection has passed maxLifetime)
date:2022-03-13 18:53:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@32f95597
date:2022-03-13 18:53:29	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@16a72f13: (connection has passed maxLifetime)
date:2022-03-13 18:53:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@52e97dfa
date:2022-03-13 18:53:30	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7beaed63: (connection has passed maxLifetime)
date:2022-03-13 18:53:30	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3016134
date:2022-03-13 18:53:42	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1b9d9e48: (connection has passed maxLifetime)
date:2022-03-13 18:53:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@73258452
date:2022-03-13 18:53:43	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5e9f035f: (connection has passed maxLifetime)
date:2022-03-13 18:53:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7de26446
date:2022-03-13 18:53:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:54:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:54:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:55:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:55:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:56:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:56:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:57:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:57:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:58:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:58:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:59:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 18:59:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:00:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:00:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:01:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:01:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:02:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:02:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:03:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:03:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:04:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:04:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:05:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:05:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:06:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:06:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:07:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:07:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:08:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:08:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:09:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:09:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:10:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:10:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:11:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:11:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:12:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:12:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:13:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:13:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:14:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:14:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:15:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:15:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:16:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:16:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:17:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:17:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:18:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:18:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:19:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:19:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:20:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:21:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:21:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:22:04	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@49a7bfcb: (connection has passed maxLifetime)
date:2022-03-13 19:22:04	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@717bee01
date:2022-03-13 19:22:21	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@435fd4bb: (connection has passed maxLifetime)
date:2022-03-13 19:22:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6381c445
date:2022-03-13 19:22:27	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@680603c3: (connection has passed maxLifetime)
date:2022-03-13 19:22:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d8b0937
date:2022-03-13 19:22:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:22:29	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5be2051b: (connection has passed maxLifetime)
date:2022-03-13 19:22:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@734ce8f6
date:2022-03-13 19:22:35	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5fdd9abf: (connection has passed maxLifetime)
date:2022-03-13 19:22:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@215db567
date:2022-03-13 19:22:38	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5277907e: (connection has passed maxLifetime)
date:2022-03-13 19:22:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2f9a4f3c
date:2022-03-13 19:22:43	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4760588f: (connection has passed maxLifetime)
date:2022-03-13 19:22:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@22aa94a
date:2022-03-13 19:22:45	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3016134: (connection has passed maxLifetime)
date:2022-03-13 19:22:45	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@73c45fac: (connection has passed maxLifetime)
date:2022-03-13 19:22:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@ced477f
date:2022-03-13 19:22:45	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@8d2c23a
date:2022-03-13 19:22:47	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3008054f: (connection has passed maxLifetime)
date:2022-03-13 19:22:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4dd04d44
date:2022-03-13 19:22:52	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1adf0f20: (connection has passed maxLifetime)
date:2022-03-13 19:22:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@43ebbeac
date:2022-03-13 19:22:55	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@600e3e3d: (connection has passed maxLifetime)
date:2022-03-13 19:22:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4d2c48a1
date:2022-03-13 19:22:56	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7d03ae7c: (connection has passed maxLifetime)
date:2022-03-13 19:22:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4913d5dc
date:2022-03-13 19:22:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:23:02	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3ecffd3e: (connection has passed maxLifetime)
date:2022-03-13 19:23:02	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@263d8ef6
date:2022-03-13 19:23:03	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5525f1cf: (connection has passed maxLifetime)
date:2022-03-13 19:23:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@28fa7441
date:2022-03-13 19:23:08	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@77fbc50c: (connection has passed maxLifetime)
date:2022-03-13 19:23:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@71187cd9
date:2022-03-13 19:23:12	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7de26446: (connection has passed maxLifetime)
date:2022-03-13 19:23:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7fdf9c8a
date:2022-03-13 19:23:14	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@32f95597: (connection has passed maxLifetime)
date:2022-03-13 19:23:14	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7be017a9
date:2022-03-13 19:23:28	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@52e97dfa: (connection has passed maxLifetime)
date:2022-03-13 19:23:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3d38dfd7
date:2022-03-13 19:23:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:23:32	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@73258452: (connection has passed maxLifetime)
date:2022-03-13 19:23:32	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@33ff2600
date:2022-03-13 19:23:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:24:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:24:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:25:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:25:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:26:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:26:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:27:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:27:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:28:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:28:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:29:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:29:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:30:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:30:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:31:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:31:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:32:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:32:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:33:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:33:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:34:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:34:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:35:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:35:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:36:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:36:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:37:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:37:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:38:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:38:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:39:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:39:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:40:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:40:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:41:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:41:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:42:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:42:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:43:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:43:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:44:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:44:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:45:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:45:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:46:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:46:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:47:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:47:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:48:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:48:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:49:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:49:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:50:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:50:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:51:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:51:42	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6381c445: (connection has passed maxLifetime)
date:2022-03-13 19:51:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@77eaccd5
date:2022-03-13 19:51:57	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@2f9a4f3c: (connection has passed maxLifetime)
date:2022-03-13 19:51:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@12c0a1bd
date:2022-03-13 19:51:57	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@717bee01: (connection has passed maxLifetime)
date:2022-03-13 19:51:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c074d95
date:2022-03-13 19:51:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:51:59	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@22aa94a: (connection has passed maxLifetime)
date:2022-03-13 19:51:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1838cacd
date:2022-03-13 19:52:03	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@215db567: (connection has passed maxLifetime)
date:2022-03-13 19:52:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5d3a47ae
date:2022-03-13 19:52:12	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@734ce8f6: (connection has passed maxLifetime)
date:2022-03-13 19:52:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@16360a27
date:2022-03-13 19:52:14	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7d8b0937: (connection has passed maxLifetime)
date:2022-03-13 19:52:14	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@18f1f691
date:2022-03-13 19:52:15	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4d2c48a1: (connection has passed maxLifetime)
date:2022-03-13 19:52:15	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1cce6157
date:2022-03-13 19:52:23	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4dd04d44: (connection has passed maxLifetime)
date:2022-03-13 19:52:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4fb3c8d7
date:2022-03-13 19:52:24	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4913d5dc: (connection has passed maxLifetime)
date:2022-03-13 19:52:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@41743f51
date:2022-03-13 19:52:24	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@263d8ef6: (connection has passed maxLifetime)
date:2022-03-13 19:52:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@454ba3a7
date:2022-03-13 19:52:26	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@43ebbeac: (connection has passed maxLifetime)
date:2022-03-13 19:52:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@49356a
date:2022-03-13 19:52:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@ced477f: (connection has passed maxLifetime)
date:2022-03-13 19:52:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c26d9bd
date:2022-03-13 19:52:36	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@28fa7441: (connection has passed maxLifetime)
date:2022-03-13 19:52:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2e12649
date:2022-03-13 19:52:44	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@8d2c23a: (connection has passed maxLifetime)
date:2022-03-13 19:52:44	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@558d1139
date:2022-03-13 19:52:56	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@71187cd9: (connection has passed maxLifetime)
date:2022-03-13 19:52:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ef4d45c
date:2022-03-13 19:52:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:52:59	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7fdf9c8a: (connection has passed maxLifetime)
date:2022-03-13 19:52:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@703325f2
date:2022-03-13 19:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7be017a9: (connection has passed maxLifetime)
date:2022-03-13 19:53:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@23491572
date:2022-03-13 19:53:14	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@33ff2600: (connection has passed maxLifetime)
date:2022-03-13 19:53:14	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2d8eef6b
date:2022-03-13 19:53:19	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3d38dfd7: (connection has passed maxLifetime)
date:2022-03-13 19:53:19	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@29b17e02
date:2022-03-13 19:53:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:53:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:54:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:54:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:55:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:55:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:56:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:56:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:57:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:57:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:58:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:58:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:59:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 19:59:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:00:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:00:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:01:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:01:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:02:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:02:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:03:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:03:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:04:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:04:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:05:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:05:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:06:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:06:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:07:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:07:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:08:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:08:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:09:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:09:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:10:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:10:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:11:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:11:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:12:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:12:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:13:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:13:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:14:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:14:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:15:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:15:59	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:16:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:17:42	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:17:42	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1fa8d160
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@b04637d
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@18f51a94
date:2022-03-13 20:17:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2c5ee223
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@75241519
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5d138f4b
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6d821fc7
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3616b7ae
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@63cfe0a8
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2267524d
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fe61de1
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5cce7a74
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1879577702 wrapping drop table "bearer_token"
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@269921546 wrapping drop table "account"
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1879577702 wrapping drop table "bearer_token"
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@269921546 wrapping drop table "account"
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 11ms
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 11ms
date:2022-03-13 20:17:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@40180be5
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1445315199 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1445315199 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@452259324 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:17:43	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@452259324 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:18:10	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:18:10	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@53ac21f5
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a4b5e8a
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7e0b1ab5
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@73c4f851
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4155dc55
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@311a65fb
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@17e21fdf
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@43b07b02
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2ce8a055
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: SimpleJdbcAction
      4: SimpleJdbcAction
      5: success ()
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4ebf2d8e
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@506267557 wrapping drop table "bearer_token"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@879670663 wrapping drop table "client"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1202110315 wrapping drop table "account"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1202110315 wrapping drop table "account"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@879670663 wrapping drop table "client"
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4924df61
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@506267557 wrapping drop table "bearer_token"
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 19ms
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 11ms
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@920323846 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1238311843 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1238311843 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@920323846 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1650550910 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1650550910 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2129513236 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2129513236 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@90cc52c
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 957µs
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@614511929 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@614511929 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@807325814 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@807325814 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 586µs
date:2022-03-13 20:18:10	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 442µs
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@608f3650
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57eba492
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@38dba6d9
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5711314b
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4eb5b04f
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4470523f
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@21f8c906
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7fbd2f1b
date:2022-03-13 20:18:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:18:10	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 20:18:11	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 20:18:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:19:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:19:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:20:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:20:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:21:10	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:21:40	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:21:46	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:21:46	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:21:46	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@77df6715
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@523bf2be
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@580026a9
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4bcd422b
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@47a66388
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4a85d7c0
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@13698557
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3294510b
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@46dadef2
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@22853a3e
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d194004
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6d154aa5
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1757532866 wrapping drop table "account"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1569746191 wrapping drop table "bearer_token"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@965640597 wrapping drop table "client"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@965640597 wrapping drop table "client"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1757532866 wrapping drop table "account"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1569746191 wrapping drop table "bearer_token"
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 10ms
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7da834bb
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 12ms
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1035346478 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@365364270 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1035346478 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@365364270 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 11ms
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 11ms
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@76f7a5fa
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1749265022 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1749265022 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1015843393 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1015843393 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1220517229 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1220517229 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@983346933 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@983346933 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 937µs
date:2022-03-13 20:21:47	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 578µs
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@41d9d240
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6def8bc
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3aef1930
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@71fcb3e2
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7e38344f
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@fd2382c
date:2022-03-13 20:21:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:21:47	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 20:21:48	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 20:22:16	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:22:46	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:23:16	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:23:47	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:23:47	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:23:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@472d3ac3
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7be07d9
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2764d378
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@62c55e3c
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4c909b85
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3b67dd01
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a193606
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@72e5abc7
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a615aad
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3feb1735
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4c31afc8
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@13d59e1a
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1531559894 wrapping drop table "account"
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1050792002 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2080921904 wrapping drop table "bearer_token"
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1531559894 wrapping drop table "account"
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1050792002 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2080921904 wrapping drop table "bearer_token"
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 13ms
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2069163442 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 20ms
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2069163442 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@23d10aff
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 21ms
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@614290184 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@614290184 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@805287687 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@805287687 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1287721075 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1287721075 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1162985795 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1162985795 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 861µs
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2109668929 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2109668929 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4464e30f
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1025446662 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1025446662 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:23:48	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 854µs
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@56a5ba4
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a70205d
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@115d431e
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@72c2a6a1
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@25a27426
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1eebca07
date:2022-03-13 20:23:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:23:48	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 20:23:49	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 20:24:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:24:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:25:07	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:25:07	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7171116c
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@54b79f89
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@456f4368
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7bfd32ca
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@27eb6a8
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6a5d2ab9
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: SimpleJdbcAction
      4: SimpleJdbcAction
      5: success ()
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@55165099
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@47ef5393
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@30d37630
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@600477931 wrapping drop table "account"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1486126631 wrapping drop table "client"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1570386359 wrapping drop table "bearer_token"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1486126631 wrapping drop table "client"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1570386359 wrapping drop table "bearer_token"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@600477931 wrapping drop table "account"
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@33589a71
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@45479757 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@45479757 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@627596045 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@627596045 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@176364379 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@176364379 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@452917262 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@452917262 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2002754957 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2002754957 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1246417310 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1246417310 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 30ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 30ms
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1631855350 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1631855350 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@79054247 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@79054247 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 497µs
date:2022-03-13 20:25:07	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@542d861b
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@69e334c6
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@422abd3c
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@35d62c1a
date:2022-03-13 20:25:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@df369e5
date:2022-03-13 20:25:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d462999
date:2022-03-13 20:25:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6a92a850
date:2022-03-13 20:25:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6ea0ffe4
date:2022-03-13 20:25:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@788a0f94
date:2022-03-13 20:25:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@344cfbfd
date:2022-03-13 20:25:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:25:08	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 20:25:08	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 20:25:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:26:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:26:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:27:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:27:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:28:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:28:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:29:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:29:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:30:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:30:27	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:30:27	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1fe760c5
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2ca1f337
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a2d94fd
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1be5912d
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3f203bdc
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c3b4f44
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4a67ba42
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d3c36da
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@43fc0c7a
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@57b3a2e
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1171291902 wrapping drop table "client"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@752667549 wrapping drop table "bearer_token"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@163265010 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@158780127 wrapping drop table "account"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@158780127 wrapping drop table "account"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@163265010 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1171291902 wrapping drop table "client"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@752667549 wrapping drop table "bearer_token"
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 10ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 15ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 16ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 16ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2120632794 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1110150047 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2120632794 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1418334483 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1418334483 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1110150047 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1301561207 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@185378545 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@185378545 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1301561207 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@624456487 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@624456487 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2130975137 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2130975137 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@72392569
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1258674156 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1258674156 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1332290668 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1332290668 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@958526586 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@958526586 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 23ms
date:2022-03-13 20:30:27	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 23ms
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6eaf5712
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4d130961
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1165f0a7
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a4c8d8f
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3ecf5813
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6bc216aa
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@551c23bd
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1b72ec64
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fb930d9
date:2022-03-13 20:30:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:30:28	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 20:30:28	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 20:30:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:31:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:31:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:32:25	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:32:25	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@26566c58
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fe8857b
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@629cf10d
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5383788a
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4622fa0e
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5dfa6cec
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@58ebeac7
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@10648e78
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@41c7e4f0
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4fd46d28
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "redirect_url"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@486e0bc7
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2086904152 wrapping drop table "redirect_url"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1028386926 wrapping drop table "bearer_token"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@725730159 wrapping drop table "client"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1941749882 wrapping drop table "account"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1028386926 wrapping drop table "bearer_token"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1941749882 wrapping drop table "account"
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ccd5bfc
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2086904152 wrapping drop table "redirect_url"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@725730159 wrapping drop table "client"
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 61ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 63ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 63ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 61ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@801226221 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@801226221 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@635971188 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@635971188 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1742040817 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1742040817 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@134296908 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@134296908 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2d3c0f1
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1182333544 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1033613904 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1885112189 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1182333544 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1885112189 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1033613904 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@806100468 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@806100468 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@77128588 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@77128588 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@893773315 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@893773315 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 459µs
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1170582523 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1170582523 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6e8250ae
date:2022-03-13 20:32:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 659µs
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@568a4e8a
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@400efd1c
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5c4669a4
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@20bd55a2
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@24c7b121
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@13165eb8
date:2022-03-13 20:32:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:32:26	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 20:32:26	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 20:32:55	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:33:25	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 20:33:26	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 20:33:26	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@68c0fb8b
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@fd96a22
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2722c74c
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6d81cdd
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@69abb32e
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2de75c43
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1c4ee614
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5a363fb4
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6eb0d51f
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@79a299ce
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "redirect_url"
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1237aea8
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1359763831 wrapping drop table "bearer_token"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1253294343 wrapping drop table "client"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@60868045 wrapping drop table "account"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@869508551 wrapping drop table "redirect_url"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@869508551 wrapping drop table "redirect_url"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1359763831 wrapping drop table "bearer_token"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@60868045 wrapping drop table "account"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1253294343 wrapping drop table "client"
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 9ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 14ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 13ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@5019939 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@5019939 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1372751572 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1372751572 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@791584938 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@560922844 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7997e8c5
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@560922844 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@791584938 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 9ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@370040281 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2074288967 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 10ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@370040281 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2074288967 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1657953546 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1657953546 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 12ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1719312988 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1719312988 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@480525975 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@480525975 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1167c2c5
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2071022887 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1286321055 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2071022887 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1286321055 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 20:33:26	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 854µs
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7c6645ce
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@530be604
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@159cfd60
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3ac264fc
date:2022-03-13 20:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@74c41e5f
date:2022-03-13 20:33:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@78f3ed05
date:2022-03-13 20:33:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@a766886
date:2022-03-13 20:33:27	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:33:27	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 20:33:27	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 20:33:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:34:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:34:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:35:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:35:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:36:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:36:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:37:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:37:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:38:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:38:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:39:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:39:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:40:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:40:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:41:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:41:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:42:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:42:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:43:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:43:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:44:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:44:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:45:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:45:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:46:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:46:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:47:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:47:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:48:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:48:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:49:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:49:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:50:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:50:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:51:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:51:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:52:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:52:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:53:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:53:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:54:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:54:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:55:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:55:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:56:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:56:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:57:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:57:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:58:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:58:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:59:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 20:59:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:00:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:00:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:01:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:01:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:02:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:02:44	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1237aea8: (connection has passed maxLifetime)
date:2022-03-13 21:02:44	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@55818251
date:2022-03-13 21:02:50	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@159cfd60: (connection has passed maxLifetime)
date:2022-03-13 21:02:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@43a41f53
date:2022-03-13 21:02:53	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@78f3ed05: (connection has passed maxLifetime)
date:2022-03-13 21:02:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4d63f957
date:2022-03-13 21:02:54	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1c4ee614: (connection has passed maxLifetime)
date:2022-03-13 21:02:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@495c7423
date:2022-03-13 21:02:56	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3ac264fc: (connection has passed maxLifetime)
date:2022-03-13 21:02:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c5ef36c
date:2022-03-13 21:02:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:02:57	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@69abb32e: (connection has passed maxLifetime)
date:2022-03-13 21:02:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6fe32b33
date:2022-03-13 21:02:58	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@74c41e5f: (connection has passed maxLifetime)
date:2022-03-13 21:02:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3d18ded9
date:2022-03-13 21:02:58	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5a363fb4: (connection has passed maxLifetime)
date:2022-03-13 21:02:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@174f5835
date:2022-03-13 21:03:02	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6eb0d51f: (connection has passed maxLifetime)
date:2022-03-13 21:03:02	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6c710c23
date:2022-03-13 21:03:03	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@2722c74c: (connection has passed maxLifetime)
date:2022-03-13 21:03:03	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1a3d182d
date:2022-03-13 21:03:05	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@68c0fb8b: (connection has passed maxLifetime)
date:2022-03-13 21:03:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@61a8e3a5
date:2022-03-13 21:03:05	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7997e8c5: (connection has passed maxLifetime)
date:2022-03-13 21:03:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c4b9155
date:2022-03-13 21:03:07	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6d81cdd: (connection has passed maxLifetime)
date:2022-03-13 21:03:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@683f94eb
date:2022-03-13 21:03:08	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@79a299ce: (connection has passed maxLifetime)
date:2022-03-13 21:03:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1a3115b1
date:2022-03-13 21:03:08	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7c6645ce: (connection has passed maxLifetime)
date:2022-03-13 21:03:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3ca27899
date:2022-03-13 21:03:12	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@2de75c43: (connection has passed maxLifetime)
date:2022-03-13 21:03:12	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6c339761
date:2022-03-13 21:03:13	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@a766886: (connection has passed maxLifetime)
date:2022-03-13 21:03:13	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@783fdec0
date:2022-03-13 21:03:17	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1167c2c5: (connection has passed maxLifetime)
date:2022-03-13 21:03:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6ab1d0eb
date:2022-03-13 21:03:23	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@fd96a22: (connection has passed maxLifetime)
date:2022-03-13 21:03:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4c83f89d
date:2022-03-13 21:03:23	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@530be604: (connection has passed maxLifetime)
date:2022-03-13 21:03:23	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@42440f7d
date:2022-03-13 21:03:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:03:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:04:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:04:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:05:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:05:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:06:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:06:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:07:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:07:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:08:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:08:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:09:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:09:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:10:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:10:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:11:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:11:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:12:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:12:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:13:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:13:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:14:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:14:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:15:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:15:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:16:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:16:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:17:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:17:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:18:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:18:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:19:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:19:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:20:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:20:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:21:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:21:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:22:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:22:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:23:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:23:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:24:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:24:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:25:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:25:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:26:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:26:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:27:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:27:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:28:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:28:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:29:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:29:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:30:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:30:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:31:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:31:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:32:06	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@55818251: (connection has passed maxLifetime)
date:2022-03-13 21:32:06	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@11deb5d3
date:2022-03-13 21:32:11	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4d63f957: (connection has passed maxLifetime)
date:2022-03-13 21:32:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@20469e7e
date:2022-03-13 21:32:17	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@43a41f53: (connection has passed maxLifetime)
date:2022-03-13 21:32:17	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@13717a41
date:2022-03-13 21:32:20	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@61a8e3a5: (connection has passed maxLifetime)
date:2022-03-13 21:32:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1db6965f
date:2022-03-13 21:32:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:32:28	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3d18ded9: (connection has passed maxLifetime)
date:2022-03-13 21:32:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@f9bdebe
date:2022-03-13 21:32:29	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@c4b9155: (connection has passed maxLifetime)
date:2022-03-13 21:32:29	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@15c313d
date:2022-03-13 21:32:34	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@683f94eb: (connection has passed maxLifetime)
date:2022-03-13 21:32:34	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@353bc9ad
date:2022-03-13 21:32:36	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1a3d182d: (connection has passed maxLifetime)
date:2022-03-13 21:32:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3bfc317a
date:2022-03-13 21:32:36	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6ab1d0eb: (connection has passed maxLifetime)
date:2022-03-13 21:32:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3fc3a2dd
date:2022-03-13 21:32:39	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@783fdec0: (connection has passed maxLifetime)
date:2022-03-13 21:32:39	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ac13b41
date:2022-03-13 21:32:43	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@42440f7d: (connection has passed maxLifetime)
date:2022-03-13 21:32:43	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@115cf315
date:2022-03-13 21:32:49	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@495c7423: (connection has passed maxLifetime)
date:2022-03-13 21:32:49	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3f389a19
date:2022-03-13 21:32:51	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6c339761: (connection has passed maxLifetime)
date:2022-03-13 21:32:51	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@31ff738e
date:2022-03-13 21:32:51	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@174f5835: (connection has passed maxLifetime)
date:2022-03-13 21:32:51	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@35c0f169
date:2022-03-13 21:32:56	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@c5ef36c: (connection has passed maxLifetime)
date:2022-03-13 21:32:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@70c279b5
date:2022-03-13 21:32:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:32:57	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6fe32b33: (connection has passed maxLifetime)
date:2022-03-13 21:32:57	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@b51cde6
date:2022-03-13 21:32:58	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@6c710c23: (connection has passed maxLifetime)
date:2022-03-13 21:32:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@41f8ac01
date:2022-03-13 21:33:02	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1a3115b1: (connection has passed maxLifetime)
date:2022-03-13 21:33:02	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@738146ee
date:2022-03-13 21:33:05	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4c83f89d: (connection has passed maxLifetime)
date:2022-03-13 21:33:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@10ed86fa
date:2022-03-13 21:33:06	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3ca27899: (connection has passed maxLifetime)
date:2022-03-13 21:33:06	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@155657fc
date:2022-03-13 21:33:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:33:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:34:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:34:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:35:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:35:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:36:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:36:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:37:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:37:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 21:38:26	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 23:11:20	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 23:11:20	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 23:11:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@68f67ae0
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@23184561
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@44ed2717
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5a95da9e
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1ef8a56
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@60bdf447
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4dc5b2d8
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3970c0d4
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@44b04096
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4b209b8b
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "redirect_url"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@220884562 wrapping drop table "account"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1474857877 wrapping drop table "redirect_url"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2088327891 wrapping drop table "bearer_token"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@114307835 wrapping drop table "client"
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2b93a345
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@220884562 wrapping drop table "account"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1474857877 wrapping drop table "redirect_url"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@114307835 wrapping drop table "client"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2088327891 wrapping drop table "bearer_token"
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 16ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 16ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 21ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 21ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@927280990 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@927280990 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1641818086 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1347117829 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1641818086 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1286261669 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1286261669 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1347117829 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@145ab083
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1493776399 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@435110580 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@173461580 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1857475182 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1493776399 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@435110580 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1857475182 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@173461580 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@680272649 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1774000676 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@220381042 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1774000676 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@220381042 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@680272649 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:11:21	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 3ms
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5228e66e
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1d1bd363
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2b24c20e
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6abbb141
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7fb531ee
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3c7675b0
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@314ff482
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6c97a53
date:2022-03-13 23:11:21	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:11:21	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 23:11:22	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 23:11:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:12:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:12:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:13:20	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:13:50	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 23:14:24	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 23:14:24	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7d638d14
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@303f17de
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7cadad1
date:2022-03-13 23:14:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1d74f66a
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7c9ed3fd
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3457aa57
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@659af25e
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fe79f21
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@55ecbe1b
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ce0b3e3
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "redirect_url"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6e5aa223
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2005876456 wrapping drop table "client"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@164573889 wrapping drop table "bearer_token"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@247114377 wrapping drop table "redirect_url"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@552376175 wrapping drop table "account"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@164573889 wrapping drop table "bearer_token"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@552376175 wrapping drop table "account"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@247114377 wrapping drop table "redirect_url"
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2005876456 wrapping drop table "client"
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@da7265e
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 17ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 17ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 17ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 19ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@935238224 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@935238224 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@624825514 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1271480966 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@624825514 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1064911379 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1064911379 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1271480966 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3d0b4d97
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@552297623 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@234382792 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1716981676 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1771523388 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1716981676 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@552297623 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1771523388 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@234382792 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@948359771 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1342350368 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@948359771 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1342350368 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1201798794 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1201798794 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:14:25	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@64ad9e7e
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5f5d7372
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6b7c3b11
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@c7cb41c
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4aa9583
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@30d8b087
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a76b13e
date:2022-03-13 23:14:25	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:14:25	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 23:14:26	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 23:14:27	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:27	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:27	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:27	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:34	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:34	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:34	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:34	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:14:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:15:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:15:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:16:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:16:54	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:17:24	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 23:17:37	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 23:17:37	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@67193b51
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@11095b0f
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@65ac3ca4
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@718df511
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fe09bc2
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@46a6212
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@a73727
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1e1c7f5f
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4579c9d5
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1254499a
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "redirect_url"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@224128496 wrapping drop table "redirect_url"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@49375527 wrapping drop table "account"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1060462374 wrapping drop table "client"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1770007700 wrapping drop table "bearer_token"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1060462374 wrapping drop table "client"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1770007700 wrapping drop table "bearer_token"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@224128496 wrapping drop table "redirect_url"
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@49375527 wrapping drop table "account"
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2bf35af8
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 19ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1730702156 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1241795947 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@743785335 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@295321289 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1730702156 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1241795947 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@743785335 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@295321289 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@56e82e5e
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@635744139 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2039895266 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2039895266 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@417467830 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@417467830 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1242040019 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1242040019 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@635744139 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@497744500 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@497744500 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1355752436 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1058455942 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1058455942 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1355752436 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 683µs
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 449µs
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5d547237
date:2022-03-13 23:17:37	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 459µs
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6dfce89e
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ce95b43
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4b64145e
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@35df12cf
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3fedb4f2
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@29c8d30f
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4265e48c
date:2022-03-13 23:17:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:17:38	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 23:17:38	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 23:17:40	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:40	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:40	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:40	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:17:46	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:18:01	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:18:01	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:18:01	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:18:01	level: WARN 	logger: akka.actor.ActorSystemImpl                      	message: Illegal request, responding with status '400 Bad Request': Unsupported HTTP method: The HTTP method started with 0x16 rather than any known HTTP method. Perhaps this was an HTTPS request sent to an HTTP endpoint?
date:2022-03-13 23:18:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:18:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:19:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:19:37	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:20:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 23:20:28	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 23:20:28	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@262c85b0
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4174eb91
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ddf91d5
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@13cd5a57
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@510e4c9b
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@37400d48
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@16b0634c
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6f568c2f
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4c1f7fca
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7b02114c
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6ebdb763
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "redirect_url"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1871240474 wrapping drop table "account"
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3551796f
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1305854926 wrapping drop table "bearer_token"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1918442959 wrapping drop table "redirect_url"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@270499304 wrapping drop table "client"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1918442959 wrapping drop table "redirect_url"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@270499304 wrapping drop table "client"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1305854926 wrapping drop table "bearer_token"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1871240474 wrapping drop table "account"
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 18ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 15ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 25ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1781830810 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 27ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@653470379 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@653470379 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1781830810 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2095053439 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2095053439 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@2017172803 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@2017172803 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@207a120
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 7ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 9ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@538193417 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1156213077 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1426592449 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1156213077 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1419462426 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@538193417 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1426592449 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1419462426 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 3ms
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@69e4585d
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@64729974 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@64729974 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1554387016 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1554387016 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@752626826 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@752626826 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 560µs
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 842µs
date:2022-03-13 23:20:28	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 632µs
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6a61fcad
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@54c57a8f
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6bf4cf96
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@20994405
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@45f8402f
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3a165b1d
date:2022-03-13 23:20:28	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:20:29	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 23:20:29	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 23:20:58	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@6a6824be
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: db_oauth2 - configuration:
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: allowPoolSuspension.............false
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: autoCommit......................true
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: catalog.........................none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionInitSql...............none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTestQuery.............none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: connectionTimeout...............30000
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSource......................none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceClassName.............none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceJNDI..................none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: dataSourceProperties............{password=<masked>}
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: driverClassName................."org.postgresql.Driver"
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckProperties...........{}
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: healthCheckRegistry.............none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: idleTimeout.....................600000
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: initializationFailTimeout.......-1
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: isolateInternalQueries..........false
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: jdbcUrl.........................jdbc:postgresql://localhost:5432/oauth2
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: leakDetectionThreshold..........0
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maxLifetime.....................1800000
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: maximumPoolSize.................20
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricRegistry..................none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: metricsTrackerFactory...........none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: minimumIdle.....................20
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: password........................<masked>
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: poolName........................"db_oauth2"
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: readOnly........................false
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: registerMbeans..................false
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: scheduledExecutor...............none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: schema..........................none
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: threadFactory...................internal
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: transactionIsolation............default
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: username........................"dev"
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.HikariConfig                  	message: validationTimeout...............5000
date:2022-03-13 23:21:11	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Starting...
date:2022-03-13 23:21:11	level: INFO 	logger: com.zaxxer.hikari.HikariDataSource              	message: db_oauth2 - Start completed.
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=0, active=0, idle=0, waiting=0)
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1da0c014
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@32bef9e1
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@37a79534
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2261fea2
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@395a3a9a
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7c6eada1
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@77eb892d
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5a52fd9c
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.basic.BasicBackend.action                 	message: #1: [fused] andThen
      1: SimpleJdbcAction
      2: SimpleJdbcAction
      3: success ()
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@32b492a6
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@3b3e32f4
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "account"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "bearer_token"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "redirect_url"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: drop table "client"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@218442147 wrapping drop table "client"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1901030405 wrapping drop table "bearer_token"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@148650559 wrapping drop table "redirect_url"
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@10b7665f
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1546267715 wrapping drop table "account"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1546267715 wrapping drop table "account"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@218442147 wrapping drop table "client"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@148650559 wrapping drop table "redirect_url"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1901030405 wrapping drop table "bearer_token"
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 15ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 14ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 14ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 17ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@308676427 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@975298987 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@308676427 wrapping create table "client" (
 "client_id" VARCHAR NOT NULL PRIMARY KEY, "secret" VARCHAR NOT NULL, "created" DATE, "deleted" DATE
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1316655661 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@975298987 wrapping create table "account" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "name" VARCHAR NOT NULL, "password" VARCHAR NOT NULL, "email" VARCHAR NOT NULL, "created" DATE
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1316655661 wrapping create table "bearer_token" (
 "id" VARCHAR NOT NULL PRIMARY KEY, "access_token" VARCHAR NOT NULL, "refresh_token" VARCHAR
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@462313577 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@462313577 wrapping create table "redirect_url" (
 "id" SERIAL NOT NULL PRIMARY KEY, "client_id" VARCHAR NOT NULL, "redirect_url" VARCHAR NOT NULL
)
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 5ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 6ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com');
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1');
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1');
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5dc4d7c8
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1023807504 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1023807504 wrapping INSERT INTO bearer_token VALUES ('account_1','atoken_1','rtoken_1')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@29970825 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@29970825 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_1', 'John Page', 'john_pass', 'john@email.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 8ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@740403995 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@740403995 wrapping INSERT INTO client(id, secret) VALUES ('client_1', 'client_secret_1')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com');
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@901518092 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@901518092 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_1', 'https://www.sample1.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 2ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2');
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com');
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 1ms
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1694390471 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@1865596047 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1694390471 wrapping INSERT INTO account(id, name, password, email) VALUES ('account_2', 'Kate Filip', 'kate_pass', 'kate@email.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Preparing statement: INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com');
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statement                	message: Executing prepared statement: HikariProxyPreparedStatement@377270798 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@377270798 wrapping INSERT INTO redirect_url(client_id, redirect_url) VALUES ('client_2', 'https://www.sample2.com')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.statementAndParameter    	message: Executing prepared statement: HikariProxyPreparedStatement@1865596047 wrapping INSERT INTO bearer_token VALUES ('account_2','atoken_2','rtoken_2')
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 485µs
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 479µs
date:2022-03-13 23:21:11	level: DEBUG	logger: slick.jdbc.JdbcBackend.benchmark                	message: Execution of prepared statement took 713µs
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@4b735f74
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1907d7c
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a3e768f
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@513f8e97
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@e6e33b
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@29f15c6
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5b4c8114
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@762ae7dc
date:2022-03-13 23:21:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - After adding stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:21:12	level: INFO 	logger: akka.event.slf4j.Slf4jLogger                    	message: Slf4jLogger started
date:2022-03-13 23:21:12	level: INFO 	logger: akka.actor.ActorSystemImpl                      	message: Start Server: https://localhost:8000
date:2022-03-13 23:21:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:22:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:22:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:23:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:23:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:24:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:24:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:25:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:25:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:26:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:26:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:27:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:27:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:28:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:28:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:29:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:29:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:30:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:30:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:31:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:31:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:32:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:32:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:33:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:33:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:34:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:34:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:35:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:35:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:36:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:36:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:37:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:37:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:38:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:38:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:39:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:39:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:40:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:40:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:41:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:41:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:42:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:42:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:43:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:43:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:44:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:44:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:45:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:45:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:46:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:46:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:47:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:47:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:48:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:48:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:49:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:49:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:50:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:50:31	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@3b3e32f4: (connection has passed maxLifetime)
date:2022-03-13 23:50:31	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@24ecb6be
date:2022-03-13 23:50:32	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@10b7665f: (connection has passed maxLifetime)
date:2022-03-13 23:50:32	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a2b4c53
date:2022-03-13 23:50:32	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@32b492a6: (connection has passed maxLifetime)
date:2022-03-13 23:50:32	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2e14ddce
date:2022-03-13 23:50:35	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@e6e33b: (connection has passed maxLifetime)
date:2022-03-13 23:50:35	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@6b164668
date:2022-03-13 23:50:36	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1907d7c: (connection has passed maxLifetime)
date:2022-03-13 23:50:36	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a0e44f2
date:2022-03-13 23:50:38	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@4b735f74: (connection has passed maxLifetime)
date:2022-03-13 23:50:38	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5ab7cc34
date:2022-03-13 23:50:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:50:41	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5a52fd9c: (connection has passed maxLifetime)
date:2022-03-13 23:50:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@52459001
date:2022-03-13 23:50:41	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@7c6eada1: (connection has passed maxLifetime)
date:2022-03-13 23:50:42	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@b39b927
date:2022-03-13 23:50:47	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@2261fea2: (connection has passed maxLifetime)
date:2022-03-13 23:50:47	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5525f0c8
date:2022-03-13 23:50:48	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@32bef9e1: (connection has passed maxLifetime)
date:2022-03-13 23:50:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5be2041c
date:2022-03-13 23:50:48	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@29f15c6: (connection has passed maxLifetime)
date:2022-03-13 23:50:48	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@5fdd9bb8
date:2022-03-13 23:50:52	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@77eb892d: (connection has passed maxLifetime)
date:2022-03-13 23:50:52	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@1adf0e27
date:2022-03-13 23:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@1da0c014: (connection has passed maxLifetime)
date:2022-03-13 23:50:53	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@60060e04
date:2022-03-13 23:50:56	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@762ae7dc: (connection has passed maxLifetime)
date:2022-03-13 23:50:56	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2b0f34fc
date:2022-03-13 23:51:00	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@37a79534: (connection has passed maxLifetime)
date:2022-03-13 23:51:00	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@183c6a7e
date:2022-03-13 23:51:04	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5b4c8114: (connection has passed maxLifetime)
date:2022-03-13 23:51:04	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7af0f168
date:2022-03-13 23:51:05	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@513f8e97: (connection has passed maxLifetime)
date:2022-03-13 23:51:05	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@2a56a61c
date:2022-03-13 23:51:07	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@5dc4d7c8: (connection has passed maxLifetime)
date:2022-03-13 23:51:07	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@78accf7e
date:2022-03-13 23:51:08	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@2a3e768f: (connection has passed maxLifetime)
date:2022-03-13 23:51:08	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@338258f
date:2022-03-13 23:51:09	level: DEBUG	logger: com.zaxxer.hikari.pool.PoolBase                 	message: db_oauth2 - Closing connection org.postgresql.jdbc.PgConnection@395a3a9a: (connection has passed maxLifetime)
date:2022-03-13 23:51:09	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Added connection org.postgresql.jdbc.PgConnection@7ebeef31
date:2022-03-13 23:51:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:51:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:52:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:52:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:53:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:53:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:54:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:54:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:55:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:55:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:56:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:56:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:57:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:57:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:58:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:58:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:59:11	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
date:2022-03-13 23:59:41	level: DEBUG	logger: com.zaxxer.hikari.pool.HikariPool               	message: db_oauth2 - Pool stats (total=20, active=0, idle=20, waiting=0)
